{"remainingRequest":"D:\\work\\proj\\project_manage\\project-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\work\\proj\\project_manage\\project-ui\\src\\views\\information-search\\road-info3.vue?vue&type=style&index=0&id=383ebe14&scoped=true&lang=scss&","dependencies":[{"path":"D:\\work\\proj\\project_manage\\project-ui\\src\\views\\information-search\\road-info3.vue","mtime":1663479653281},{"path":"D:\\work\\proj\\project_manage\\project-ui\\node_modules\\css-loader\\dist\\cjs.js","mtime":1663230084856},{"path":"D:\\work\\proj\\project_manage\\project-ui\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1663230088519},{"path":"D:\\work\\proj\\project_manage\\project-ui\\node_modules\\postcss-loader\\src\\index.js","mtime":1663230086089},{"path":"D:\\work\\proj\\project_manage\\project-ui\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1663230084018},{"path":"D:\\work\\proj\\project_manage\\project-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1663230084016},{"path":"D:\\work\\proj\\project_manage\\project-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":1663230087832}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCkBpbXBvcnQgJ35AL2Fzc2V0cy9zdHlsZXMvZHJhd3Muc2Nzcyc7DQpAaW1wb3J0ICd+QC9hc3NldHMvc3R5bGVzL3BvcHVwLnNjc3MnOw0KQGltcG9ydCAnfkAvYXNzZXRzL3N0eWxlcy9zd2l0Y2guc2Nzcyc7DQouZWwtY2hlY2tib3gtZ3JvdXAgew0KICB3aWR0aDogMTAwJTsNCn0NCi5jb2xvckJveCB7DQogIHdpZHRoOiA0OHB4Ow0KICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7DQogIGJvcmRlci1yYWRpdXM6IDJweDsNCiAgcG9zaXRpb246IGFic29sdXRlOw0KICByaWdodDogMTBweDsNCiAgdG9wOiA2cHg7DQp9DQouZWwtY2hlY2tib3gtZ3JvdXAgLmVsLWNoZWNrYm94Om50aC1jaGlsZCgxKSAuY29sb3JCb3ggew0KICBoZWlnaHQ6IDEycHg7DQp9DQouZWwtY2hlY2tib3gtZ3JvdXAgLmVsLWNoZWNrYm94Om50aC1jaGlsZCgyKSAuY29sb3JCb3ggew0KICBoZWlnaHQ6IDExcHg7DQp9DQouZWwtY2hlY2tib3gtZ3JvdXAgLmVsLWNoZWNrYm94Om50aC1jaGlsZCgzKSAuY29sb3JCb3ggew0KICBoZWlnaHQ6IDEwcHg7DQp9DQouZWwtY2hlY2tib3gtZ3JvdXAgLmVsLWNoZWNrYm94Om50aC1jaGlsZCg0KSAuY29sb3JCb3ggew0KICBoZWlnaHQ6IDlweDsNCn0NCi5lbC1jaGVja2JveC1ncm91cCAuZWwtY2hlY2tib3g6bnRoLWNoaWxkKDUpIC5jb2xvckJveCB7DQogIGhlaWdodDogOHB4Ow0KfQ0KLmVsLWNoZWNrYm94LWdyb3VwIC5lbC1jaGVja2JveDpudGgtY2hpbGQoNikgLmNvbG9yQm94IHsNCiAgaGVpZ2h0OiA3cHg7DQp9DQouZWwtY2hlY2tib3gtZ3JvdXAgLmVsLWNoZWNrYm94Om50aC1jaGlsZCg3KSAuY29sb3JCb3ggew0KICBoZWlnaHQ6IDZweDsNCn0NCi5yb2FkLXNlbGVjdG9yLWNvbG9yIHsNCiAgd2lkdGg6IDEwMCU7DQp9DQo6OnYtZGVlcCAuZWwtY2hlY2tib3ggew0KICBwb3NpdGlvbjogcmVsYXRpdmU7DQogIGRpc3BsYXk6IGJsb2NrOw0KICBoZWlnaHQ6IDI2cHg7DQogIC8vIGxpbmUtaGVpZ2h0OiAyNnB4Ow0KICB3aWR0aDogMTAwJTsNCn0NCg=="},{"version":3,"sources":["road-info3.vue"],"names":[],"mappingso+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"road-info3.vue","sourceRoot":"src/views/information-search","sourcesContent":["<template>\r\n  <div id=\"map\" ref=\"map\">\r\n    <!--点击查看详情弹框-->\r\n    <div id=\"popup\" class=\"ol-popup\">\r\n      <a\r\n        href=\"#\"\r\n        id=\"popup-closer\"\r\n        class=\"ol-popup-closer\"\r\n        @click=\"removePopup\"\r\n      />\r\n      <div id=\"popup-content\"></div>\r\n    </div>\r\n    <!--道路选择器-->\r\n    <!-- <div id=\"pop-road-selector\" class=\"ol-layer\">\r\n      <div class=\"road-selector-pop\">\r\n        <div class=\"pop-title\">地块颜色</div>\r\n        <el-switch\r\n        class=\"div-switch\"\r\n          v-model=\"value1\"\r\n          active-color=\"#004AB3\"\r\n          inactive-color=\"#004AB3\"\r\n          active-text=\"建设信息\"\r\n          inactive-text=\"道路等级\"\r\n          @change=\"switchChange\"\r\n        >\r\n        </el-switch>\r\n        <div ref=\"roadTypeColorDiv\" class=\"road-selector-color\">\r\n          <el-tree\r\n            ref=\"tree\"\r\n            :data=\"treeData\"\r\n            show-checkbox\r\n            node-key=\"id\"\r\n            :default-checked-keys=\"defaultCheckedIds\"\r\n            :default-expanded-keys=\"defaultExpandIds\"\r\n            :props=\"defaultProps\"\r\n            @check=\"handleCheckChange\"\r\n            v-show=\"value1 == false\"\r\n          >\r\n            <div class=\"custom-tree-node\" slot-scope=\"{ node, data }\">\r\n              <span>\r\n                {{ node.label }}\r\n              </span>\r\n              <span\r\n                class=\"dot\"\r\n                :style=\"{ background: data.lengendColor }\"\r\n              ></span>\r\n            </div>\r\n          </el-tree>\r\n          <el-tree\r\n            style=\"height: 200px; overflow: auto\"\r\n            ref=\"tree\"\r\n            :data=\"treeData2\"\r\n            show-checkbox\r\n            node-key=\"id\"\r\n            default-expand-all\r\n            :default-checked-keys=\"defaultCheckedIds\"\r\n            :default-expanded-keys=\"defaultExpandIds\"\r\n            :props=\"defaultProps\"\r\n            @check=\"handleCheckChange\"\r\n            v-show=\"value1 == true\"\r\n          >\r\n            <div class=\"custom-tree-node\" slot-scope=\"{ node, data }\">\r\n              <span>\r\n                {{ node.label }}\r\n              </span>\r\n              <span\r\n                class=\"dot\"\r\n                :style=\"{ background: data.lengendColor }\"\r\n              ></span>\r\n            </div>\r\n          </el-tree>\r\n        </div>\r\n      </div>\r\n    </div> -->\r\n    <div id=\"pop-road-selector\" class=\"ol-layer\">\r\n      <div class=\"road-selector-pop\">\r\n        <div class=\"pop-title\">道路颜色</div>\r\n        <el-switch\r\n          class=\"div-switch\"\r\n          v-model=\"value1\"\r\n          active-color=\"#004AB3\"\r\n          inactive-color=\"#004AB3\"\r\n          active-text=\"建设信息\"\r\n          inactive-text=\"道路等级\"\r\n          @change=\"switchChange\"\r\n        >\r\n        </el-switch>\r\n        <div ref=\"roadTypeColorDiv\" class=\"road-selector-color\">\r\n          <el-checkbox-group v-model=\"roadTypeRadio\" v-show=\"value1 == false\">\r\n            <el-checkbox\r\n              v-for=\"(item, index) in roadTypeDispalyLengendList\"\r\n              :label=\"item.lengendTypeValue\"\r\n              @change=\"roadTypeChange\"\r\n              :key=\"index\"\r\n              >{{ item.lengendTypeName\r\n              }}<span\r\n                class=\"colorBox\"\r\n                :style=\"{ background: item.stroke }\"\r\n              ></span\r\n            ></el-checkbox>\r\n          </el-checkbox-group>\r\n\r\n          <el-checkbox-group v-model=\"radio2\" v-show=\"value1 == true\">\r\n            <el-checkbox\r\n              v-for=\"(item, index) in buildStatusLengendList\"\r\n              :label=\"item.lengendTypeValue\"\r\n              @change=\"buildStatusChange\"\r\n              :key=\"index\"\r\n              >{{ item.lengendTypeName\r\n              }}<span\r\n                class=\"colorBox\"\r\n                :style=\"{ background: item.stroke }\"\r\n              ></span\r\n            ></el-checkbox>\r\n          </el-checkbox-group>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!--总体信息折叠控制层-->\r\n    <transition name=\"move\">\r\n      <!--总体信息浮动框-->\r\n      <div id=\"pop-summry\" class=\"ol-layer\" v-if=\"hidPop\">\r\n        <div class=\"mbg\"></div>\r\n        <!--总体信息控制图层(上)-->\r\n        <div class=\"pop-summry-control\" @click=\"hideSummryPop\">\r\n          <div>\r\n            <div class=\"pop-summry-control-title\">\r\n              <span>总体信息</span>\r\n              <img src=\"~@/assets/images/arrow-down.png\" class=\"jt-icon\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <scoll-div-vue style=\"padding: 25px\">\r\n          <!--总体信息表格-->\r\n          <div class=\"div-bg\" v-for=\"(item, index) in tableArray\" :key=\"index\">\r\n            <table\r\n              class=\"ol-popsummry-detail-table\"\r\n              v-if=\"item.cptType == 'TABLE'\"\r\n            >\r\n              <span class=\"table-title\">{{ item.title }}</span>\r\n              <tr v-for=\"(item2, index2) in item.tableData\" :key=\"index2\">\r\n                <th>{{ item2.label }}</th>\r\n                <td>{{ item2.value }}</td>\r\n              </tr>\r\n            </table>\r\n            <bar_chart_vVue\r\n              :barData=\"item\"\r\n              v-if=\"item.cptType == 'BAR' && item.tableDirection == 'H'\"\r\n            ></bar_chart_vVue>\r\n            <pie_chartVue\r\n              :pieData=\"item\"\r\n              v-if=\"item.cptType == 'PIE'\"\r\n            ></pie_chartVue>\r\n            <bar_chart_hVue\r\n              :barData=\"item\"\r\n              v-if=\"item.cptType == 'BAR' && item.tableDirection == 'V'\"\r\n            ></bar_chart_hVue>\r\n          </div>\r\n        </scoll-div-vue>\r\n      </div>\r\n    </transition>\r\n    <!--总体信息折叠控制层-->\r\n    <transition name=\"move\">\r\n      <div id=\"pop-summry—collapse\" class=\"ol-layer\" v-show=\"showPop\">\r\n        <div class=\"pop-summry-control\" @click=\"showSummryPop\">\r\n          <div>\r\n            <div class=\"pop-summry-control-title blue-title\">\r\n              <span>总体信息</span>\r\n              <img src=\"~@/assets/images/arrow-up.png\" class=\"jt-icon\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </transition>\r\n    <nav_barVue :navList=\"navList\"></nav_barVue>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport 'ol/ol.css'\r\nimport Map from 'ol/Map'\r\nimport * as olControl from 'ol/control'\r\nimport View from 'ol/View'\r\nimport { getWidth, getCenter } from 'ol/extent'\r\nimport TileLayer from 'ol/layer/Tile'\r\nimport WMTS from 'ol/source/WMTS'\r\nimport XYZ from 'ol/source/XYZ'\r\nimport WMTSTileGrid from 'ol/tilegrid/WMTS'\r\nimport Projection from 'ol/proj/Projection'\r\nimport { transform, fromLonLat } from 'ol/proj'\r\nimport proj4 from 'proj4'\r\nimport { register } from 'ol/proj/proj4';\r\nimport VectorSource from 'ol/source/Vector'\r\nimport { TileWMS } from 'ol/source'\r\nimport VectorLayer from 'ol/layer/Vector'\r\nimport Feature from 'ol/Feature'\r\nimport { Draw } from 'ol/interaction'\r\nimport { Style, Circle, Stroke, Fill } from 'ol/src/style'\r\nimport WKT from 'ol/format/WKT'\r\nimport GeoJSON from 'ol/format/GeoJSON'\r\nimport Overlay from 'ol/Overlay'\r\nimport * as echarts from \"echarts\";\r\nimport axios from 'axios'\r\nimport OlGeomPoint from 'ol/geom/Point'\r\nimport OlStyleStyle from 'ol/style/Style'\r\nimport OlStyleIcon from 'ol/style/Icon'\r\nimport Text from 'ol/style/Text'\r\nimport nav_barVue from '../components/nav_bar.vue'\r\nimport { findComponentInfo } from \"@/api/config/component\";\r\nimport { getUrlKey, request } from '@/utils/request'\r\nimport bar_chart_vVue from '../traffic-decision/components/bar_chart_v.vue'\r\nimport pie_chartVue from '../traffic-decision/components/pie_chart.vue'\r\nimport scollDivVue from '../traffic-decision/components/scollDiv.vue'\r\nimport bar_chart_hVue from '../traffic-decision/components/bar_chart_h.vue'\r\nimport Vue from 'vue'\r\n//中心坐标\r\nconst centerCordinate = [656813.44256, 3560432.98245]\r\n//坐标定义\r\nproj4.defs(\"EPSG:4548\", \"+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs\");\r\nregister(proj4);\r\n//是否展示总体信息标识\r\nvar showSummryFlag = true;\r\n// 道路类型图例常量\r\n\r\nconst layerName = \"Test:plane1_v2\";\r\nvar vectorLayer;\r\n//地图初始化\r\nconst view = new View({\r\n  center: transform(centerCordinate, 'EPSG:4548', 'EPSG:3857'),\r\n  minZoom: 4,\r\n  maxZoom: 18,\r\n  zoom: 13.6 // 地图初始化的缩放级别\r\n})\r\n\r\n\r\n\r\n//高德地图图层\r\nconst gaodeMapLayer = new TileLayer({\r\n  source: new XYZ({\r\n    url: 'http://webst0{1-4}.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=7&x={x}&y={y}&z={z}'\r\n  })\r\n});\r\n\r\n\r\n\r\nexport default {\r\n  name: \"Road\",\r\n  components: {\r\n    nav_barVue, bar_chart_vVue, scollDivVue, pie_chartVue, bar_chart_hVue\r\n  },\r\n  data () {\r\n    return {\r\n      navList: ['信息查询', '道路信息'],\r\n      value1: 'true',   //开关\r\n      roadTypeRadio: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"],        //道路等级\r\n      radio2: [\"1\", \"2\", \"3\"],       //建设信息\r\n      geoJsonList: {},\r\n      roadBasicInfo: {},\r\n      markLayerName: 'Test%3Aroad_points',\r\n      markMinZoom: 14.7,\r\n      markFlag: false,\r\n      hidPop: false,\r\n      showPop: true,\r\n      markVectorArray: [],\r\n      tableArray: [],\r\n      menuId: null,\r\n      markDataCache: null,\r\n      myChart: {},\r\n      // sortData: [], //动态排序数据\r\n      myChartStyle: {\r\n        width: \"100%\", height: \"250px\", display: \"inline-block\"\r\n      },\r\n      roadTypeLengendList: [\r\n        {\r\n          lengendTypeName: \"高速公路\",\r\n          lengendTypeValue: \"5\",\r\n          filterProperty: \"layer\",\r\n          stroke: \"#00FF00\",\r\n          strokeWidth: \"7.2\",\r\n          enableSelect: true\r\n        },\r\n        {\r\n          lengendTypeName: \"快速路\",\r\n          lengendTypeValue: \"1\",\r\n          filterProperty: \"layer\",\r\n          stroke: \"#ff00ff\",\r\n          strokeWidth: \"6.3\",\r\n          enableSelect: true\r\n\r\n        },\r\n        {\r\n          lengendTypeName: \"主干路\",\r\n          lengendTypeValue: \"2\",\r\n          filterProperty: \"layer\",\r\n          stroke: \"#ff0000\",\r\n          strokeWidth: \"5.4\",\r\n          enableSelect: true\r\n        },\r\n\r\n        {\r\n          lengendTypeName: \"次干路\",\r\n          lengendTypeValue: \"3\",\r\n          filterProperty: \"layer\",\r\n          stroke: \"#007fff\",\r\n          strokeWidth: \"3.6\",\r\n          enableSelect: true\r\n        },\r\n        {\r\n          lengendTypeName: \"支路\",\r\n          lengendTypeValue: \"4\",\r\n          filterProperty: \"layer\",\r\n          stroke: \"#00994c\",\r\n          strokeWidth: \"2.7\",\r\n          enableSelect: true\r\n        },\r\n\r\n        {\r\n          lengendTypeName: \"低等级道路\",\r\n          lengendTypeValue: \"6\",\r\n          filterProperty: \"layer\",\r\n          stroke: \"#999900\",\r\n          strokeWidth: \"1.8\",\r\n          enableSelect: true\r\n        },\r\n        {\r\n          lengendTypeName: \"匝道\",\r\n          lengendTypeValue: \"7\",\r\n          filterProperty: \"layer\",\r\n          stroke: \"#00FFFF\",\r\n          strokeWidth: \"1.8\",\r\n          enableSelect: true\r\n        },\r\n\r\n        {\r\n          lengendTypeName: \"00道路红线\",\r\n          lengendTypeValue: \"8\",\r\n          filterProperty: \"layer\",\r\n          stroke: \"#bbbbbb\",\r\n          strokeWidth: \"1.6\",\r\n          enableSelect: false\r\n        },\r\n        {\r\n          lengendTypeName: \"00规划边界\",\r\n          lengendTypeValue: \"9\",\r\n          filterProperty: \"layer\",\r\n          stroke: \"#FF0000\",\r\n          strokeWidth: \"1.8\",\r\n          dashOffset: \"10\",\r\n          dasharray: \"10 15\",\r\n          enableSelect: false\r\n\r\n        },\r\n\r\n      ],\r\n      roadTypeDispalyLengendList: [],\r\n\r\n      buildStatusLengendList: [\r\n        {\r\n          lengendTypeName: \"建成使用\",\r\n          lengendTypeValue: \"1\",\r\n          filterProperty: \"status\",\r\n          stroke: \"#b1db16\",\r\n          strokeWidth: \"3\",\r\n          enableSelect: true\r\n\r\n        },\r\n        {\r\n          lengendTypeName: \"施工建设中\",\r\n          lengendTypeValue: \"2\",\r\n          filterProperty: \"status\",\r\n          stroke: \"#ebcc0c\",\r\n          strokeWidth: \"4\",\r\n          enableSelect: true\r\n        },\r\n\r\n        {\r\n          lengendTypeName: \"规划道路\",\r\n          lengendTypeValue: \"3\",\r\n          filterProperty: \"status\",\r\n          stroke: \"#eb7323\",\r\n          strokeWidth: \"5\",\r\n          enableSelect: true\r\n        }],\r\n\r\n\r\n      layerStyleSld: \"\"\r\n    }\r\n  },\r\n  mounted () {\r\n\r\n    //初始化菜单\r\n    this.menuId = getUrlKey('menuId');\r\n    //查询组件信息\r\n    this.initComponentInfo();\r\n    //初始图例展示数据\r\n    this.initDisplayLengendData()\r\n    //组装图层样式数据\r\n    this.initStyle();\r\n    //初始化图层\r\n    this.initMap();\r\n    this.showPop = false\r\n    this.hidPop = true\r\n    //加载道路整体信息\r\n    //this.getRoadInfo(this)\r\n    var popSummry = document.getElementById('pop-summry')\r\n    popSummry.addEventListener(\"webkitAnimationEnd\", function () {\r\n      if (!showSummryFlag) {\r\n        document.getElementById('pop-summry—collapse').style.display = 'block';\r\n      }\r\n    })\r\n\r\n    popSummry.addEventListener(\"animationend\", function () {\r\n      if (!showSummryFlag) {\r\n        document.getElementById('pop-summry—collapse').style.display = 'block';\r\n      }\r\n    })\r\n    document.getElementsByClassName('ol-popup').style.display = 'none';\r\n  },\r\n\r\n\r\n\r\n  methods: {\r\n    initLegendInfo (legendList, _this) {\r\n      if (legendList && legendList.length > 0) {\r\n        //设置树节点数据\r\n        let treeData_ = legendList[0];\r\n        _this.treeData = treeData_;\r\n        //设置顶级菜单选中\r\n        let checkedIds_ = [];\r\n        let expandIds = [];\r\n        for (let k = 0; k < treeData_.length; k++) {\r\n          let item = treeData_[k];\r\n          if (item.parentId == null) {\r\n            checkedIds_.push(item.id);\r\n            let children_ = item.children;\r\n            if (children_ != null && children_.length != 0) {\r\n              for (let j = 0; j < children_.length; j++) {\r\n                expandIds.push(children_[j].id);\r\n              }\r\n            } else {\r\n              expandIds.push(item.id);\r\n            }\r\n          }\r\n        }\r\n        //默认展展开二级菜单\r\n        _this.defaultExpandIds = expandIds;\r\n        _this.defaultCheckedIds = checkedIds_;\r\n      }\r\n\r\n    },\r\n\r\n    initComponentInfo () {\r\n      let _this = this;\r\n      findComponentInfo(this.menuId, null).then(response => {\r\n        //图例\r\n        let legendConfigData = response.data.decLegendConfigList;\r\n        if (legendConfigData && legendConfigData.length > 0) {\r\n          //设置树节点数据\r\n          let treeData_ = legendConfigData[0];\r\n          let treeData2_ = legendConfigData[1];\r\n          //隐藏设置的节点\r\n          _this.treeData = treeData_;\r\n          _this.treeData2 = treeData2_;\r\n          debugger\r\n          //设置顶级菜单选中\r\n          let expandIds = [];\r\n          for (let k = 0; k < treeData_.length; k++) {\r\n            let item = treeData_[k];\r\n            if (item.parentId == null) {\r\n              let children_ = item.children;\r\n              if (children_ != null && children_.length != 0) {\r\n                for (let j = 0; j < children_.length; j++) {\r\n                  expandIds.push(children_[j].id);\r\n                }\r\n              } else {\r\n                expandIds.push(item.id);\r\n              }\r\n            }\r\n          }\r\n          //默认展展开二级菜单\r\n          this.defaultExpandIds = expandIds;\r\n          this.defaultCheckedIds = _this.getTreecheckedId(treeData_);\r\n        }\r\n        //表格\r\n        let tableList = response.data.tableList;\r\n        _this.tableArray = tableList;\r\n\r\n\r\n      });\r\n    },\r\n    //递归获节点信息\r\n    getCheckedIdsRecur (item, ids_) {\r\n      if (item.id && item.checkStatus == 'Y') {\r\n        ids_ = (ids_ == null ? [] : ids_);\r\n        ids_.push(item.id);\r\n      }\r\n      //如果子节点选中，需要将父节半选中状态节点加入\r\n      let currentLen = ids_.length;\r\n      if (item.children != null) {\r\n        item.children.forEach(item => {\r\n          this.getCheckedIdsRecur(item, ids_)\r\n        })\r\n        if (currentLen < ids_.length && ids_.indexOf(item.id) == -1) {\r\n          ids_.push(item.id);\r\n        }\r\n      }\r\n    },\r\n    //获取树所有的节点信息\r\n    getTreecheckedId (treeData) {\r\n      let ids = [];\r\n      treeData.forEach(item => {\r\n        this.getCheckedIdsRecur(item, ids);\r\n      })\r\n      return ids;\r\n    },\r\n    initDisplayLengendData () {\r\n      this.roadTypeDispalyLengendList = this.roadTypeLengendList.filter((item) => {\r\n        return item.enableSelect == true;\r\n      })\r\n\r\n    },\r\n    //初始化样式\r\n    initStyle () {\r\n      var initSld = '<?xml version=\"1.0\" encoding=\"GBK\"?><StyledLayerDescriptor version=\"1.0.0\" xmlns=\"http://www.opengis.net/sld\" xmlns:ogc=\"http://www.opengis.net/ogc\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:gml=\"http://www.opengis.net/gml\" xsi:schemaLocation=\"http://www.opengis.net/sld http://schemas.opengis.net/sld/1.0.0/StyledLayerDescriptor.xsd\"><NamedLayer><Name>' + layerName + '</Name><UserStyle><Name>roadType</Name><Title>roadType</Title><Abstract>roadType</Abstract><FeatureTypeStyle>';\r\n      this.roadTypeLengendList.forEach((item) => {\r\n        var typeName = item.lengendTypeName;\r\n        var filterProperty = item.filterProperty;\r\n        var stroke = item.stroke;\r\n        var strokeWidth = item.strokeWidth;\r\n        var dashOffset = item.dashOffset;\r\n        var dasharray = item.dasharray;\r\n        initSld = initSld + '<Rule><Title>' + typeName + '</Title><ogc:Filter><ogc:PropertyIsEqualTo><ogc:PropertyName>' + filterProperty + '</ogc:PropertyName><ogc:Literal>' + typeName + '</ogc:Literal></ogc:PropertyIsEqualTo></ogc:Filter>' + '<PolygonSymbolizer><Stroke><CssParameter name=\"stroke\">' + stroke + '</CssParameter><CssParameter name=\"stroke-width\">' + strokeWidth + '</CssParameter>';\r\n        if (dashOffset) {\r\n          initSld = initSld + '<CssParameter name=\"stroke-dashoffset\">' + dashOffset + '</CssParameter>'\r\n        }\r\n        if (dasharray) {\r\n          initSld = initSld + '<CssParameter name=\"stroke-dasharray\">' + dasharray + '</CssParameter>'\r\n        }\r\n        initSld = initSld + '</Stroke></PolygonSymbolizer></Rule>'\r\n\r\n      });\r\n      initSld = initSld + '</FeatureTypeStyle></UserStyle></NamedLayer></StyledLayerDescriptor>';\r\n      this.layerStyleSld = initSld;\r\n    },\r\n\r\n    // 初始化地图\r\n    initMap () {\r\n      const mapContainer = this.$refs.map\r\n      //通过wms加载数据\r\n      const wmsSource = new TileWMS({\r\n        url: process.env.VUE_APP_GIS_BASE_URL + '/wms',\r\n        projection: 'EPSG:4548',\r\n        params: {\r\n          'LAYERS': layerName,\r\n          'VERSION': '1.1.0',\r\n          'STYLES': undefined,\r\n          'SLD_BODY': this.layerStyleSld\r\n        },\r\n        serverType: 'geoserver'\r\n      });\r\n      //自定义图层\r\n      vectorLayer = new TileLayer({\r\n        source: wmsSource\r\n      });\r\n\r\n      //将图层加入Map\r\n      const map = new Map({\r\n        layers: [gaodeMapLayer, vectorLayer],\r\n        target: mapContainer,\r\n        view: view\r\n      });\r\n\r\n      // 添加鼠标点击事件\r\n      map.on('click', this.mapClick);\r\n      map.on('moveend', this.mapMoveend);\r\n      // 保存地图\r\n      this.mapData = map\r\n    },\r\n    createMarkStyle (feature, fontAngle) {\r\n      //返回一个样式\r\n      return new OlStyleStyle({\r\n        //文本样式\r\n        text: new Text({\r\n          textAlign: 'center',\r\n          textBaseline: 'middle',\r\n          font: 'normal 12px 微软雅黑',\r\n          text: feature.get('name'),\r\n          fill: new Fill({\r\n            color: '#bbbbbb'\r\n          }),\r\n          rotation: fontAngle * Math.PI / 180,\r\n          padding: [2, 5, 2, 5],\r\n        }),\r\n        // 设置层级\r\n        zIndex: 1999999999\r\n      });\r\n    },\r\n\r\n    createMarkFeature (featureParam) {\r\n      // 初始化标签要素\r\n      let cordinate = transform(\r\n        featureParam.geometry.coordinates,\r\n        \"EPSG:4548\",\r\n        \"EPSG:3857\"\r\n      )\r\n      let fontAngle = featureParam.properties.font_angle;\r\n      let feature = new Feature({\r\n        geometry: new OlGeomPoint(cordinate),\r\n        name: featureParam.properties.name,\r\n        // img: require('../../assets/images/mark.png'),\r\n      })\r\n      feature.setId(featureParam.id)\r\n      feature.setStyle(this.createMarkStyle(feature, fontAngle))\r\n      let source = new VectorSource({})\r\n      source.addFeature(feature)\r\n      let layer = new VectorLayer({\r\n        source: source\r\n      })\r\n      this.markVectorArray.push(layer);\r\n      this.mapData.addLayer(layer);\r\n    },\r\n\r\n    addRoadMark (viewObj) {\r\n      try {\r\n        if (viewObj.markDataCache != null) {\r\n          let featureArray = viewObj.markDataCache.features;\r\n          featureArray.forEach(item => {\r\n            viewObj.createMarkFeature(item);\r\n          })\r\n          return;\r\n        }\r\n        let url = process.env.VUE_APP_GIS_BASE_URL + '/Test/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=' + this.markLayerName + '&maxFeatures=500000000&outputFormat=application%2Fjson';\r\n        axios.get(url, null).then(function (res) {\r\n          let markRespData = res.data;\r\n          viewObj.markDataCache = res.data;\r\n          if (markRespData) {\r\n            let featureArray = markRespData.features;\r\n            featureArray.forEach(item => {\r\n              viewObj.createMarkFeature(item);\r\n            })\r\n\r\n          }\r\n\r\n        });\r\n      } catch (error) {\r\n        console.error(error)\r\n      }\r\n    },\r\n    // 弹出框\r\n    addPopup (coordinate, feature) {\r\n      this.removePopup()\r\n      // 获取弹出层DOM\r\n      let container = document.getElementById('popup')\r\n      let content = document.getElementById('popup-content')\r\n      if (this.overlay) {\r\n      } else {\r\n        // 创建Overlay弹出层绑定DOM\r\n        this.overlay = new Overlay({\r\n          element: container,\r\n          autoPan: {\r\n            animation: {\r\n              duration: 250\r\n            }\r\n          }\r\n        })\r\n        // 添加到map\r\n        this.mapData.addOverlay(this.overlay)\r\n      }\r\n      // 弹出层内容\r\n      let featureVal = feature.properties;\r\n      let layer = featureVal.layer == null ? \"\" : featureVal.layer;\r\n      let handle = featureVal.handle == null ? \"\" : featureVal.handle;\r\n      let length = featureVal.length == null ? \"\" : Math.floor(featureVal.length) + \" m\";\r\n      let capacity = featureVal.capacity == null ? \"\" : featureVal.capacity + ' pcu/h';\r\n      let dir = featureVal.dir == 1 ? \"单向\" : featureVal.dir == -1 ? \"反向单向\" : featureVal.dir == 0 ? \"双向\" : '';\r\n      let speed = featureVal.speed == null ? \"\" : featureVal.speed + ' m/h';\r\n\r\n\r\n      let popHtml = `\r\n            <div style='color:#121924;font-weight: bold;width:100%;z-index:4;height:50px;padding:6px;font-size: 15px'>`+ layer + `</div>\r\n  \r\n            <div style='font-size: 10px;width:100%' id='info1'>\r\n`\r\n      if (handle != '') {\r\n        popHtml = popHtml + `\r\n        <div style=\"height: 28px;width:100%\">\r\n          <a style=\"color:#646566;width:45%;display: inline-block;\">道路ID:</a>\r\n          <a style=\"text-align: right;font-size:14px;width:50%;display: inline-block;\">`+ handle + `</a>\r\n        </div> `\r\n      }\r\n      if (layer != '') {\r\n        popHtml = popHtml + `\r\n        <div style=\"height: 28px;width:100%\">\r\n          <a style=\"color:#646566;width:45%;display: inline-block;\">道路等级:</a>\r\n          <a style=\"text-align: right;font-size:14px;width:50%;display: inline-block;\">`+ layer + `</a>\r\n        </div> `\r\n      }\r\n      if (length != '') {\r\n        popHtml = popHtml + `\r\n        <div style=\"height: 28px;width:100%\">\r\n          <a style=\"color:#646566;width:45%;display: inline-block;\">道路长度:</a>\r\n          <a style=\"text-align: right;font-size:14px;width:50%;display: inline-block;\">`+ length + `</a>\r\n        </div> `\r\n      }\r\n      if (dir != '') {\r\n        popHtml = popHtml + `\r\n        <div style=\"height: 28px;width:100%\">\r\n          <a style=\"color:#646566;width:45%;display: inline-block;\">方向:</a>\r\n          <a style=\"text-align: right;font-size:14px;width:50%;display: inline-block;\">`+ dir + `</a>\r\n        </div> `\r\n      }\r\n      if (capacity != '') {\r\n        popHtml = popHtml + `\r\n        <div style=\"height: 28px;width:100%\">\r\n          <a style=\"color:#646566;width:45%;display: inline-block;\">通行能力:</a>\r\n          <a style=\"text-align: right;font-size:14px;width:50%;display: inline-block;\">`+ capacity + `</a>\r\n        </div> `\r\n      }\r\n      if (speed != '') {\r\n        popHtml = popHtml + `\r\n        <div style=\"height: 28px;width:100%\">\r\n          <a style=\"color:#646566;width:45%;display: inline-block;\">设计车速:</a>\r\n          <a style=\"text-align: right;font-size:14px;width:50%;display: inline-block;\">`+ speed + `</a>\r\n        </div> `\r\n      }\r\n\r\n      popHtml = popHtml + `\r\n        <div style=\"height: 28px;width:100%\">\r\n          <a style=\"color:#646566;width:45%;display: inline-block;\">建设信息:</a>\r\n          <a style=\"text-align: right;font-size:14px;width:50%;display: inline-block;\">规划道路</a>\r\n        </div> </div > `\r\n      content.innerHTML = popHtml;\r\n      // 设置弹出层位置即可出现\r\n      this.overlay.setPosition(coordinate)\r\n      document.getElementsByClassName('ol-popup').style.display = 'block';\r\n    },\r\n\r\n    // 清除弹出框\r\n    removePopup () {\r\n      if (this.overlay) {\r\n        // 设置位置undefined可达到隐藏清除弹出框\r\n        this.overlay.setPosition(undefined)\r\n        this.clearHighlight()\r\n      }\r\n    },\r\n    showSummryPop () {\r\n      this.showPop = false\r\n      this.hidPop = true\r\n    },\r\n\r\n    hideSummryPop () {\r\n      this.showPop = true\r\n      this.hidPop = false\r\n    },\r\n    changeStyle (lengendList, checkedList) {\r\n      if (checkedList == null || checkedList.length == 0) {\r\n        vectorLayer.setVisible(false);\r\n        return;\r\n      }\r\n      vectorLayer.setVisible(true);\r\n      var changeStyle = false;\r\n      var initSld = '<?xml version=\"1.0\" encoding=\"GBK\"?><StyledLayerDescriptor version=\"1.0.0\" xmlns=\"http://www.opengis.net/sld\" xmlns:ogc=\"http://www.opengis.net/ogc\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:gml=\"http://www.opengis.net/gml\" xsi:schemaLocation=\"http://www.opengis.net/sld http://schemas.opengis.net/sld/1.0.0/StyledLayerDescriptor.xsd\"><NamedLayer><Name>' + layerName + '</Name><UserStyle><Name>roadType</Name><Title>roadType</Title><Abstract>roadType</Abstract><FeatureTypeStyle>';\r\n      lengendList.forEach((item) => {\r\n        var typeName = item.lengendTypeName;\r\n        var lengendTypeValue = item.lengendTypeValue;\r\n        var filterProperty = item.filterProperty;\r\n        var stroke = item.stroke;\r\n        var strokeWidth = item.strokeWidth;\r\n        var dashOffset = item.dashOffset;\r\n        var dasharray = item.dasharray;\r\n        //\r\n        var index = checkedList.findIndex(item => {\r\n          return item === lengendTypeValue;\r\n        })\r\n        var enableSelect = item.enableSelect\r\n        if (!enableSelect || index != -1) {\r\n          changeStyle = true;\r\n          initSld = initSld + '<Rule><Title>' + typeName + '</Title><ogc:Filter><ogc:PropertyIsEqualTo><ogc:PropertyName>' + filterProperty + '</ogc:PropertyName><ogc:Literal>' + typeName + '</ogc:Literal></ogc:PropertyIsEqualTo></ogc:Filter>' + '<PolygonSymbolizer><Stroke><CssParameter name=\"stroke\">' + stroke + '</CssParameter><CssParameter name=\"stroke-width\">' + strokeWidth + '</CssParameter>';\r\n          if (dashOffset) {\r\n            initSld = initSld + '<CssParameter name=\"stroke-dashoffset\">' + dashOffset + '</CssParameter>'\r\n          }\r\n          if (dasharray) {\r\n            initSld = initSld + '<CssParameter name=\"stroke-dasharray\">' + dasharray + '</CssParameter>'\r\n          }\r\n          initSld = initSld + '</Stroke></PolygonSymbolizer></Rule>'\r\n        }\r\n      });\r\n      initSld = initSld + '</FeatureTypeStyle></UserStyle></NamedLayer></StyledLayerDescriptor>';\r\n      if (changeStyle) {\r\n        vectorLayer.getSource().updateParams({ 'STYLES': undefined, 'SLD_BODY': initSld });\r\n      }\r\n\r\n    },\r\n\r\n\r\n\r\n\r\n    //道路类型样式改变\r\n    roadTypeChange () {\r\n      this.removePopup();\r\n      this.clearHighlight();\r\n      this.changeStyle(this.roadTypeLengendList, this.roadTypeRadio);\r\n    },\r\n\r\n    //建设状态样式\r\n    buildStatusChange () {\r\n      this.clearHighlight();\r\n      this.removePopup();\r\n      this.changeStyle(this.buildStatusLengendList, this.radio2);\r\n    },\r\n\r\n    switchChange () {\r\n      var changeVal = this.value1;\r\n      changeVal ? this.buildStatusChange() : this.roadTypeChange();\r\n    },\r\n\r\n    //删除高亮图层\r\n    clearHighlight () {\r\n      let arr = this.mapData.getLayers().array_\r\n      let highlightLayer = {}\r\n      arr.forEach(item => {\r\n        if (item.get(\"id\") == \"highlightLayer\") {\r\n          highlightLayer = item\r\n        }\r\n      })\r\n      if (highlightLayer && highlightLayer.className_) {\r\n        this.mapData.removeLayer(highlightLayer)\r\n      }\r\n    },\r\n\r\n    //新增高亮图层\r\n    addHighLightStyle (clickFeature, thisObj, clickLayer) {\r\n      this.clearHighlight();\r\n      let featureObj = new GeoJSON({ featureProjection: 'EPSG:3857', dataProjection: 'EPSG:4548' }).readFeatures(clickFeature)\r\n      let highLightStyle = new Style({\r\n        fill: new Fill({\r\n          color: \"#ffff00\"\r\n        }),\r\n        stroke: new Stroke({\r\n          color: \"#ffff00\",\r\n\r\n          width: 6\r\n        }),\r\n\r\n      })\r\n      featureObj[0].setStyle(highLightStyle);\r\n      thisObj.highLightLayer = new VectorLayer({\r\n        name: \"highlightLayer\",\r\n        source: new VectorSource({\r\n          features: featureObj,\r\n        }),\r\n        style: (feature, solution) => {\r\n          let currentStyle = feature.getSource().getResolution().style;\r\n          return highLightStyle;\r\n        }\r\n      })\r\n      thisObj.highLightLayer.set(\"id\", \"highlightLayer\")\r\n      this.mapData.addLayer(thisObj.highLightLayer)\r\n\r\n\r\n    },\r\n\r\n\r\n    //地图点击事件\r\n    mapClick (evt) {\r\n      this.removePopup();\r\n      let thisObj = this;\r\n      var viewResolution = view.getResolution();\r\n      var featureUrl = vectorLayer.getSource().getFeatureInfoUrl(\r\n        evt['coordinate'],\r\n        viewResolution,\r\n        'EPSG:3857',\r\n        { 'INFO_FORMAT': 'application/json' }\r\n      );\r\n      if (featureUrl) {\r\n        fetch(featureUrl)\r\n          .then(function (response) {\r\n            return response.text();\r\n          })\r\n          .then(function (info) {\r\n            var objData = JSON.parse(info);\r\n            if (objData && objData.features[0]) {\r\n              thisObj.addPopup(evt.coordinate, objData.features[0]);\r\n              thisObj.addHighLightStyle(objData.features[0], thisObj, vectorLayer)\r\n\r\n            } else {\r\n              thisObj.removePopup();\r\n            }\r\n\r\n          });\r\n      } else {\r\n        this.removePopup();\r\n      }\r\n    },\r\n\r\n    mapMoveend (evt) {\r\n      var zoom = this.mapData.getView().getZoom();\r\n      if (zoom > this.markMinZoom && this.markFlag == false) {\r\n        this.markFlag = true;\r\n        this.addRoadMark(this);\r\n      } else if (zoom <= this.markMinZoom && this.markFlag == true) {\r\n        this.markFlag = false;\r\n        this.markVectorArray.forEach(item => {\r\n          this.mapData.removeLayer(item);\r\n        })\r\n        this.markVectorArray = [];\r\n      }\r\n    },\r\n    handleCheckChange (data_) {\r\n      this.clearHighlight();\r\n      this.removePopup();\r\n      let halfCheckNode = this.$refs.tree.getHalfCheckedNodes();\r\n      let halfCheckIds = [];\r\n      halfCheckNode.forEach(item => {\r\n        halfCheckIds.push(item.id)\r\n      });\r\n      //获取选中以及半选中节点\r\n      var checkedArray = this.$refs.tree.getCheckedKeys(false);\r\n      checkedArray = checkedArray.concat(halfCheckIds);\r\n      let checkedLayerArray = this.getLayerMap(checkedArray);\r\n      let currentLayers = this.layerArray;\r\n      //如果当前选中数组为空，当前所有图层隐藏\r\n      if (checkedLayerArray == null || checkedLayerArray.length == 0) {\r\n        currentLayers.forEach(item => {\r\n          item.setVisible(false)\r\n        })\r\n        return;\r\n      }\r\n      //获取待添加的图层(图例树初始化部分选中)\r\n      for (let i = 0; i < checkedLayerArray.length; i++) {\r\n        if (!checkedLayerArray[i].layerName) {\r\n          continue;\r\n        }\r\n        let treeDataItem = checkedLayerArray[i].treeDataItem;\r\n        if (!treeDataItem) {\r\n          currentLayers.forEach(item => {\r\n            if (item.values_.name == checkedLayerArray[i].layerName) {\r\n              item.setVisible(false)\r\n\r\n            }\r\n          })\r\n          continue;\r\n        }\r\n        for (let j = 0; j < treeDataItem.length; j++) {\r\n          let item = treeDataItem[j];\r\n          let exist = false;\r\n          for (let n = 0; n < currentLayers.length; n++) {\r\n            let layer = currentLayers[n];\r\n            if (layer.values_.filterVal == item.filterValue &&\r\n              layer.values_.name == checkedLayerArray[i].layerName) {\r\n              exist = true;\r\n              layer.setVisible(true)\r\n              continue;\r\n            }\r\n\r\n          }\r\n        }\r\n      }\r\n\r\n      //隐藏取消勾选的图层\r\n      if (!currentLayers || currentLayers.length == 0) {\r\n        return;\r\n      }\r\n      let existLayer = [];\r\n      for (let k = 0; k < currentLayers.length; k++) {\r\n        let exist = false;\r\n        for (let i = 0; i < checkedLayerArray.length; i++) {\r\n          let tempItems = checkedLayerArray[i].treeDataItem;\r\n          let layArray_ = this.getAreaLineLays(checkedLayerArray[i].layerName, currentLayers[k].values_.filterVal);\r\n          for (let m = 0; m < tempItems.length; m++) {\r\n            if (currentLayers[k].values_.filterVal == tempItems[m].filterValue &&\r\n              currentLayers[k].values_.name == checkedLayerArray[i].layerName) {\r\n              exist = true;\r\n              if (existLayer.indexOf(tempItems[m].filterValue) == -1 && layArray_.length > 1) {\r\n                existLayer.push(tempItems[m].filterValue);\r\n              }\r\n              currentLayers[k].setVisible(true);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (!exist) {\r\n          currentLayers[k].setVisible(false);\r\n\r\n        }\r\n      }\r\n    },\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '~@/assets/styles/draws.scss';\r\n@import '~@/assets/styles/popup.scss';\r\n@import '~@/assets/styles/switch.scss';\r\n.el-checkbox-group {\r\n  width: 100%;\r\n}\r\n.colorBox {\r\n  width: 48px;\r\n  display: inline-block;\r\n  border-radius: 2px;\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 6px;\r\n}\r\n.el-checkbox-group .el-checkbox:nth-child(1) .colorBox {\r\n  height: 12px;\r\n}\r\n.el-checkbox-group .el-checkbox:nth-child(2) .colorBox {\r\n  height: 11px;\r\n}\r\n.el-checkbox-group .el-checkbox:nth-child(3) .colorBox {\r\n  height: 10px;\r\n}\r\n.el-checkbox-group .el-checkbox:nth-child(4) .colorBox {\r\n  height: 9px;\r\n}\r\n.el-checkbox-group .el-checkbox:nth-child(5) .colorBox {\r\n  height: 8px;\r\n}\r\n.el-checkbox-group .el-checkbox:nth-child(6) .colorBox {\r\n  height: 7px;\r\n}\r\n.el-checkbox-group .el-checkbox:nth-child(7) .colorBox {\r\n  height: 6px;\r\n}\r\n.road-selector-color {\r\n  width: 100%;\r\n}\r\n::v-deep .el-checkbox {\r\n  position: relative;\r\n  display: block;\r\n  height: 26px;\r\n  // line-height: 26px;\r\n  width: 100%;\r\n}\r\n</style>\r\n"]}]}