{"remainingRequest":"D:\\work\\proj\\project_manage\\project-ui\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\work\\proj\\project_manage\\project-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\work\\proj\\project_manage\\project-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\work\\proj\\project_manage\\project-ui\\src\\views\\project\\manager\\index.vue?vue&type=template&id=095954d0&","dependencies":[{"path":"D:\\work\\proj\\project_manage\\project-ui\\src\\views\\project\\manager\\index.vue","mtime":1663727915521},{"path":"D:\\work\\proj\\project_manage\\project-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1663230084016},{"path":"D:\\work\\proj\\project_manage\\project-ui\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1663230088567},{"path":"D:\\work\\proj\\project_manage\\project-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1663230084016},{"path":"D:\\work\\proj\\project_manage\\project-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":1663230087832}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}