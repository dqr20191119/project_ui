{"remainingRequest":"D:\\work\\proj\\project_manage\\project-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\work\\proj\\project_manage\\project-ui\\src\\views\\traffic-decision\\components\\tab2-right.vue?vue&type=style&index=0&id=19373cc8&scoped=true&lang=scss&","dependencies":[{"path":"D:\\work\\proj\\project_manage\\project-ui\\src\\views\\traffic-decision\\components\\tab2-right.vue","mtime":1663479653290},{"path":"D:\\work\\proj\\project_manage\\project-ui\\node_modules\\css-loader\\dist\\cjs.js","mtime":1663230084856},{"path":"D:\\work\\proj\\project_manage\\project-ui\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1663230088519},{"path":"D:\\work\\proj\\project_manage\\project-ui\\node_modules\\postcss-loader\\src\\index.js","mtime":1663230086089},{"path":"D:\\work\\proj\\project_manage\\project-ui\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1663230084018},{"path":"D:\\work\\proj\\project_manage\\project-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1663230084016},{"path":"D:\\work\\proj\\project_manage\\project-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":1663230087832}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCkBpbXBvcnQgJ35AL2Fzc2V0cy9zdHlsZXMvcG9wdXAuc2Nzcyc7DQpAaW1wb3J0ICd+QC9hc3NldHMvc3R5bGVzL3RyYWZmaWMuc2Nzcyc7DQouY29udGVudCB7DQogIHBvc2l0aW9uOiByZWxhdGl2ZTsNCn0NCi5zZWxlY3QtZGl2IHsNCiAgbGVmdDogMjhweDsNCiAgdG9wOiA3MHB4Ow0KICBwYWRkaW5nOiAxMHB4IDE2cHggMCAxNnB4Ow0KfQ0K"},{"version":3,"sources":["tab2-right.vue"],"names":[],"mappingsw3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"tab2-right.vue","sourceRoot":"src/views/traffic-decision/components","sourcesContent":["<template>\r\n  <div class=\"content\">\r\n    <!--  -->\r\n    <div class=\"select-div\">\r\n      <div class=\"select-title\">右侧方案</div>\r\n      <div>\r\n        <el-select\r\n          v-model=\"rightPlane\"\r\n          placeholder=\"请选择\"\r\n          @change=\"changeRigthPlane\"\r\n        >\r\n          <el-option\r\n            v-for=\"item in rightPlaneList\"\r\n            :key=\"item.key\"\r\n            :label=\"item.name\"\r\n            :value=\"item.value\"\r\n          >\r\n          </el-option>\r\n        </el-select>\r\n      </div>\r\n    </div>\r\n    <div id=\"map2\" ref=\"map2\" style=\"width: 100%; height: 890px\">\r\n      <!--点击查看详情弹框-->\r\n      <div id=\"popup2\" class=\"ol-popup2\">\r\n        <a\r\n          href=\"#\"\r\n          id=\"popup-closer2\"\r\n          class=\"ol-popup-closer2\"\r\n          @click=\"removeBtn\"\r\n        />\r\n        <div id=\"popup-content2\"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport 'ol/ol.css'\r\nimport Map from 'ol/Map'\r\nimport * as olControl from 'ol/control'\r\nimport View from 'ol/View'\r\nimport { getWidth, getCenter } from 'ol/extent'\r\nimport TileLayer from 'ol/layer/Tile'\r\nimport WMTS from 'ol/source/WMTS'\r\nimport XYZ from 'ol/source/XYZ'\r\nimport WMTSTileGrid from 'ol/tilegrid/WMTS'\r\nimport Projection from 'ol/proj/Projection'\r\nimport proj4 from 'proj4'\r\nimport { register } from 'ol/proj/proj4';\r\nimport VectorSource from 'ol/source/Vector'\r\nimport { TileWMS } from 'ol/source'\r\nimport VectorLayer from 'ol/layer/Vector'\r\nimport Feature from 'ol/Feature'\r\nimport { Draw } from 'ol/interaction'\r\nimport { Style, Circle, Stroke, Fill, Icon, IconImage, Image, Text } from 'ol/src/style'\r\nimport WKT from 'ol/format/WKT'\r\nimport GeoJSON from 'ol/format/GeoJSON'\r\nimport Overlay from 'ol/Overlay'\r\nimport * as echarts from \"echarts\";\r\nimport axios from 'axios'\r\nimport request from '@/utils/request'\r\nimport tab2LeftVue from './tab2-left.vue'\r\nimport { formatFixNum, convertFeature } from \"@/api/common/common\";\r\nimport { featureCompaire } from \"@/api/decision/plane\";\r\nimport * as turf from '@turf/turf';\r\nimport Point from 'ol/geom/Point';\r\nimport { fromLonLat, toLonLat, transformExtent, transform } from 'ol/proj'\r\nimport LineString from 'ol/geom/LineString';\r\nimport MultiLineString from 'ol/geom/MultiLineString';\r\nimport { initTreeList } from \"@/api/decision-manage/decision\";\r\n//中心坐标\r\nconst centerCordinate = [656813.44256, 3560432.98245]\r\n//坐标定义\r\nproj4.defs(\"EPSG:4548\", \"+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs\");\r\nregister(proj4);\r\nlet newList = []\r\nlet parentVal=''\r\n//地图初始化\r\nconst view2 = new View({\r\n  center: transform(centerCordinate, 'EPSG:4548', 'EPSG:3857'),\r\n  minZoom: 10,\r\n  maxZoom: 18,\r\n  zoom: 13.5// 地图初始化的缩放级别\r\n})\r\n\r\n\r\n//高德地图图层\r\nconst gaodeMapLayer = new TileLayer({\r\n  source: new XYZ({\r\n    url: 'http://webst0{1-4}.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scl=2&style=7&x={x}&y={y}&z={z}'\r\n  })\r\n});\r\n\r\n\r\n\r\nexport default {\r\n  data () {\r\n    return {\r\n      rightPlaneList: [],\r\n      popTransList: [\r\n        { label: 'AB交通量', propertie: 'ab_flow', unit: 'pcu/h', type: 'int' },\r\n        { label: 'BA交通量', propertie: 'ba_flow', unit: 'pcu/h', type: 'int' },\r\n        { label: '总交通量', propertie: 'tot_flow', unit: 'pcu/h', type: 'int' },\r\n        { label: 'AB饱和度', propertie: 'ab_voc', maxlength: 2, type: 'float' },\r\n        { label: 'BA饱和度', propertie: 'ba_voc', maxlength: 2, type: 'float' },\r\n        { label: '最大饱和度', propertie: 'max_voc', maxlength: 2, type: 'float' },\r\n      ],\r\n      rightPlane: '',\r\n      leftSelectedPlane: null,\r\n      vectorLayer: null,\r\n      style: {\r\n        line_width: 3,\r\n        line_stroke: '#459c50',\r\n        interval: 40\r\n      },\r\n      map: null\r\n    }\r\n  },\r\n  mounted () {\r\n    this.initComponentInfo()\r\n    this.initMap();\r\n    // 高亮\r\n    this.$bas.$on(\"addRightHighLightStyle\", (i, j, num) => {\r\n      this.addHighLightStyle(i, j, num)\r\n    })\r\n    //清除高亮\r\n    this.$bas.$on(\"clearHighlight_L\", (i) => {\r\n      this.clearHighlight()\r\n    })\r\n    this.rightPlaneList = this.rightPlaneList.filter((item) => {\r\n      return item.bizVal == parentVal\r\n    })\r\n\r\n    this.$bas.$on(\"leftPlaneChange\", (i) => {\r\n      this.rightPlaneList = JSON.parse(JSON.stringify(newList));\r\n      console.log(this.rightPlaneList);\r\n      this.rightPlaneList = this.rightPlaneList.filter((item) => {\r\n        return item.value != i && item.bizVal == parentVal\r\n      })\r\n      this.rightPlane = this.rightPlaneList[0].value\r\n      this.leftSelectedPlane=i\r\n      this.initVectorLayer()\r\n    })\r\n\r\n    //拖动监听方法\r\n    this.$bas.$on(\"leftPanelDrageChange\", (cordinate, zoom) => {\r\n      if (cordinate && zoom) {\r\n        this.rightCurrentCordinate = cordinate;\r\n        this.rigthtCurrentZoom = zoom;\r\n        view2.animate({\r\n          center: cordinate,\r\n          zoom: zoom, // 缩放级别\r\n          rotation: undefined,\r\n          duration: 10\r\n        })\r\n      }\r\n    })\r\n\r\n    //缩放监听\r\n    this.$bas.$on(\"leftMovvendChange\", (cordinate, zoom) => {\r\n      if (cordinate && zoom) {\r\n        this.rightCurrentCordinate = cordinate;\r\n        this.rigthtCurrentZoom = zoom;\r\n        view2.animate({\r\n          center: cordinate,\r\n          zoom: zoom, // 缩放级别\r\n          rotation: undefined,\r\n          duration: 10\r\n        })\r\n      }\r\n    })\r\n    document.getElementById('popup2').style.display = 'none';\r\n    //交通信息点击按钮\r\n    window.preview3 = function () {\r\n      document.getElementById('info4').style.display = 'block';\r\n      document.getElementById('info3').style.display = 'none';\r\n      document.getElementById('btn3').style.background = '#004AB3';\r\n      document.getElementById('btn4').style.background = '#D3D6DB';\r\n      document.getElementById('info2').style.display = 'block';\r\n      document.getElementById('info1').style.display = 'none';\r\n      document.getElementById('btn1').style.background = '#004AB3';\r\n      document.getElementById('btn2').style.background = '#D3D6DB';\r\n    }\r\n    //基本信息点击按钮\r\n    window.preview4 = function () {\r\n      document.getElementById('info4').style.display = 'none';\r\n      document.getElementById('info3').style.display = 'block';\r\n      document.getElementById('btn4').style.background = '#004AB3';\r\n      document.getElementById('btn3').style.backgroundColor = '#D3D6DB';\r\n      document.getElementById('info2').style.display = 'none';\r\n      document.getElementById('info1').style.display = 'block';\r\n      document.getElementById('btn2').style.background = '#004AB3';\r\n      document.getElementById('btn1').style.backgroundColor = '#D3D6DB';\r\n    }\r\n  },\r\n  methods: {\r\n\r\n    addMarkTextLayer () {\r\n      this.$emit('aquirePointMarkData', this.mapData);\r\n    },\r\n\r\n    changeCompareItemByBizType (parentVal, this_, leftPanel) {\r\n      parentVal=parentVal\r\n      this_.rightPlaneList = JSON.parse(JSON.stringify(newList));\r\n      this_.rightPlaneList = this_.rightPlaneList.filter((item) => {\r\n        return item.bizVal == parentVal && item.value != leftPanel\r\n      })\r\n      this_.rightPlane = this_.rightPlaneList[0].value\r\n      this_.initVectorLayer()\r\n\r\n    },\r\n\r\n    // getPointsByLine (coords, dir) {\r\n    //   let this_ = this;\r\n    //   let styles = [];\r\n    //   let distance_ = this_.style.interval / 2;//首个点放置在距离起点1/2间隔的位置\r\n    //   let pix_start = this_.mapData.getPixelFromCoordinate(coords[0])\r\n    //   let pix_end\r\n    //   for (let i = 1; i < coords.length; i++) {\r\n    //     let coord_, coord_pix;\r\n    //     let style_;\r\n    //     pix_end = this_.mapData.getPixelFromCoordinate(coords[i]);\r\n    //     let dis_start2end = Math.sqrt(Math.pow((pix_start[0] - pix_end[0]), 2) + Math.pow((pix_start[1] - pix_end[1]), 2)) // 计算收尾在屏幕上的距离\r\n    //     if (dis_start2end > distance_) { // 距离大于间隔\r\n    //       // 计算距离开始点位的像素值\r\n    //       coord_pix = [\r\n    //         (distance_ * (pix_end[0] - pix_start[0])) / dis_start2end + pix_start[0],\r\n    //         (distance_ * (pix_end[1] - pix_start[1])) / dis_start2end + pix_start[1]\r\n    //       ];\r\n    //       // 计算经纬度\r\n    //       coord_ = this_.mapData.getCoordinateFromPixel(coord_pix);\r\n    //       var rotation = Math.PI / 2 + Math.atan2(pix_end[1] - pix_start[1], pix_end[0] - pix_start[0]);\r\n    //       if (dir == -1) {\r\n    //         rotation = rotation + Math.PI\r\n    //       }\r\n    //       // 生成样式\r\n    //       style_ = new Style({\r\n    //         // 箭头点的位置\r\n    //         geometry: new Point(coord_),\r\n    //         // 箭头点的样式\r\n    //         image: new Icon({\r\n    //           src: require('@/assets/images/juece/up10-10.png'),\r\n    //           rotateWithView: true,\r\n    //           rotation: rotation,\r\n    //           scale: this.style.line_width / 5,\r\n    //           imgSize: [10, 10]\r\n    //         })\r\n    //       })\r\n    //       //下次循环开始点为当前点\r\n    //       pix_start = coord_pix;\r\n    //       distance_ = this_.style.interval;\r\n    //       i--;\r\n    //     } else if (dis_start2end == distance_) {// 距离等于间隔\r\n    //       var rotation = Math.PI / 2 + Math.atan2(pix_end[1] - pix_start[1], pix_end[0] - pix_start[0])\r\n    //       if (dir == -1) {\r\n    //         rotation = rotation + Math.PI\r\n    //       }\r\n    //       // 生成样式\r\n    //       style_ = new Style({\r\n    //         // 箭头点的位置\r\n    //         geometry: new Point(coords[i]),\r\n    //         // 箭头点的样式\r\n    //         image: new Icon({\r\n    //           src: require('@/assets/images/juece/up10-10.png'),\r\n    //           rotateWithView: true,\r\n    //           rotation: rotation,\r\n    //           scale: this.style.line_width / 5,\r\n    //           imgSize: [10, 10]\r\n    //         })\r\n    //       })\r\n    //       pix_start = pix_end;\r\n    //       distance_ = this_.style.interval;\r\n    //     } else {//距离小于间隔\r\n    //       distance_ = distance_ - dis_start2end;\r\n    //       pix_start = pix_end;\r\n    //     }\r\n    //     style_ && styles.push(style_)\r\n    //   }\r\n    //   return styles\r\n    // },\r\n\r\n    getPointExtent (n) {\r\n      n = n ? n : 1.2;\r\n      let view = this.mapData.getView();\r\n      let mapsize = this.mapData.getSize().map(it_ => {\r\n        return it_ * n\r\n      });\r\n      return view.calculateExtent(mapsize);\r\n    },\r\n\r\n\r\n    getMiddlePoint (coords, feature) {\r\n      try {\r\n        if (coords == null || coords.length == 0 || coords == undefined) {\r\n          return null;\r\n        }\r\n        if (coords.length <= 3) {\r\n          var point_features = turf.points(feature.getGeometry().getCoordinates()[0]);\r\n          return new Point(turf.center(point_features).geometry.coordinates);\r\n        }\r\n        if (coords.length % 2 == 0) {\r\n          return new Point(coords[coords.length / 2])\r\n        } else {\r\n          return new Point(coords[Math.ceil(coords.length / 2)])\r\n        }\r\n      } catch (err) {\r\n        console.log(err)\r\n      }\r\n\r\n    },\r\n\r\n\r\n    iniFlowOrVocText (coords, feature, this_, text, offsetX, offsety) {\r\n      let centerPoint = this.getMiddlePoint(coords, feature);\r\n      if (!centerPoint) {\r\n        return null;\r\n      }\r\n      let pix_start = this_.mapData.getPixelFromCoordinate(coords[0])\r\n      let pix_end = this_.mapData.getPixelFromCoordinate(centerPoint.flatCoordinates);\r\n      var rotation = Math.PI + Math.atan2(pix_end[1] - pix_start[1], pix_end[0] - pix_start[0]);\r\n      if (pix_end[0] > pix_start[0]) {\r\n        rotation = rotation + Math.PI\r\n      }\r\n      text = text + \"\";\r\n      let color = this_.getColorByFeature(feature);\r\n      return this.createTextStyle(centerPoint, rotation, text, offsetX, offsety, color);\r\n    },\r\n\r\n\r\n\r\n    initFlowOrVocPoint (feature, this_, isFlow) {\r\n      let coords = feature.getGeometry().getCoordinates();\r\n      let styles = [];\r\n      let extent_ = this_.getPointExtent();\r\n      let line_ = turf.multiLineString(coords);\r\n      let line_clip_arr = turf.bboxClip(line_, extent_)\r\n      let ab_text = isFlow ? feature.get(\"ab_flow\") : feature.get(\"ab_voc\");\r\n      let ba_text = isFlow ? feature.get(\"ba_flow\") : feature.get(\"ba_voc\");\r\n      if (ab_text != null && ab_text != '') {\r\n        ab_text = isFlow ? Math.floor(ab_text) : formatFixNum(ab_text, 2);\r\n      }\r\n      if (ba_text != null && ba_text != '') {\r\n        ba_text = isFlow ? Math.floor(ba_text) : formatFixNum(ba_text, 2);\r\n      }\r\n\r\n      if (line_clip_arr.geometry.type == \"LineString\") {\r\n        if (ab_text != null && ab_text != '') {\r\n          let offsetX = 15;\r\n          let offsety = 15;\r\n          let style_ab = this_.iniFlowOrVocText(line_clip_arr.geometry.coordinates, feature, this_, ab_text, offsetX, offsety);\r\n          styles = styles.concat(style_ab)\r\n        }\r\n        if (ba_text != null && ba_text != '') {\r\n          let offsetX = -15;\r\n          let offsety = -15;\r\n          let style_ba = this_.iniFlowOrVocText(line_clip_arr.geometry.coordinates, feature, this_, ba_text, offsetX, offsety);\r\n          styles = styles.concat(style_ba)\r\n        }\r\n\r\n      }\r\n      return styles;\r\n    },\r\n\r\n\r\n    createTextStyle (coordinate, roation, text, offsetx, offsety, color) {\r\n      let styles_ = [];\r\n      let text_ = new Text({\r\n        textAlign: 'center',\r\n        textBaseline: 'middle',\r\n        font: 'normal 15px 微软雅黑',\r\n        text: text,\r\n        textBaseline: \"middle\", //文本基线\r\n        offsetY: offsetx,\r\n        offsetX: offsety,\r\n        fill: new Fill({\r\n          color: color\r\n        }),\r\n        rotation: roation,\r\n      })\r\n      let style_ = new Style({\r\n        geometry: coordinate,\r\n      })\r\n      style_.setText(text_)\r\n      styles_.push(style_)\r\n      return styles_;\r\n    },\r\n\r\n    getColorByFeature (feature) {\r\n      // 饱和度\r\n      var max_voc = feature.get(\"max_voc\");\r\n      var color = this.style.line_stroke;\r\n      if (max_voc > 0 && max_voc <= 0.25) {\r\n        color = '#185817';\r\n      } else if (max_voc > 0.25 && max_voc <= 0.5) {\r\n        color = '#61a43a';\r\n      } else if (max_voc > 0.5 && max_voc <= 0.75) {\r\n        color = '#cfe05d';\r\n      } else if (max_voc > 0.75 && max_voc <= 1) {\r\n        color = '#d8c964';\r\n      } else if (max_voc > 1 && max_voc <= 1.25) {\r\n        color = '#d79550';\r\n      } else if (max_voc > 1.25 && max_voc <= 1.5) {\r\n        color = '#c75b41';\r\n      } else if (max_voc > 1.5 && max_voc <= 1.75) {\r\n        color = '#c75b41';\r\n      } else if (max_voc > 1.75) {\r\n        color = '#000000';\r\n      }\r\n      return color;\r\n    },\r\n\r\n\r\n    getPointsStyle (feature) {\r\n      let coords = feature.getGeometry().getCoordinates();\r\n      let this_ = this;\r\n      let styles = [];\r\n      // 方向（1单向，-1反向单向，0双向）\r\n      var dir = feature.get(\"dir\");\r\n      // 饱和度\r\n      var max_voc = feature.get(\"max_voc\");\r\n      // 流量\r\n      var tot_flow = feature.get(\"tot_flow\");\r\n      // 颜色默认值\r\n      var color = this.getColorByFeature(feature);\r\n      // 粗细默认值\r\n      var width = this_.style.line_width;\r\n\r\n      var pec = 2;\r\n      if (tot_flow > 0 && tot_flow <= 1250) {\r\n        width = 1 * pec;\r\n      } else if (tot_flow > 1250 && tot_flow <= 2500) {\r\n        width = 2 * pec;\r\n      } else if (tot_flow >= 2500) {\r\n        width = 4 * pec;\r\n      }\r\n      styles.push(\r\n        new Style({\r\n          stroke: new Stroke({\r\n            color: color,\r\n            width: width,\r\n          }),\r\n        })\r\n      )\r\n      // let extent_ = this.getPointExtent();\r\n      // let line_ = turf.multiLineString(coords);\r\n      // let line_clip_arr = turf.bboxClip(line_, extent_)\r\n      // if (line_clip_arr && line_clip_arr.geometry) {\r\n      //   if (line_clip_arr.geometry.type == \"LineString\") {\r\n      //     let style_ = this_.getPointsByLine(line_clip_arr.geometry.coordinates, dir);\r\n      //     if (style_ instanceof Array) {\r\n      //       styles = styles.concat(style_)\r\n      //     } else {\r\n      //       styles.push(style_)\r\n      //     }\r\n      //   } else if (line_clip_arr.geometry.type == \"MultiLineString\") {\r\n      //     line_clip_arr.geometry.coordinates.forEach(coords => {\r\n      //       let style_ = this_.getPointsByLine(coords, dir)\r\n      //       if (style_ instanceof Array) {\r\n      //         styles = styles.concat(style_)\r\n      //       } else {\r\n      //         styles.push(style_)\r\n      //       }\r\n      //     })\r\n      //   }\r\n      // }\r\n      return styles\r\n    },\r\n\r\n    initVectorLayer () {\r\n      let planeInfo = this.rightPlaneList.find(item => item.value == this.rightPlane)\r\n      // 初始化拿到公共数据\r\n      var $map = this.mapData;\r\n      $map.removeLayer(this.vectorLayer);\r\n      var $this = this;\r\n      // 请求数据\r\n      var url = process.env.VUE_APP_GIS_BASE_URL + '/Test/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=' + encodeURI(planeInfo.layerName) + '&maxFeatures=500000000&outputFormat=application%2Fjson';\r\n      axios.get(url, null).then(function (res) {\r\n        var featuresData = res.data;\r\n        var vectorSource = new VectorSource({\r\n          features: (new GeoJSON({ featureProjection: 'EPSG:3857', dataProjection: 'EPSG:4548' })).readFeatures(featuresData)\r\n        });\r\n\r\n        $this.vectorLayer = new VectorLayer({\r\n          source: vectorSource,\r\n          name: planeInfo.layerName,\r\n          style: (feature, solution) => {\r\n            let styles = $this.getPointsStyle(feature);\r\n            //根据文字控制按钮新增文字样式\r\n            let activeBtn = $this.$parent.$parent.$parent.activeBtn;\r\n            if (activeBtn != '' && activeBtn != 3) {\r\n              let isFlow = activeBtn == 3;\r\n              let flowStyle = $this.initFlowOrVocPoint(feature, $this, isFlow)\r\n              if (flowStyle != null) {\r\n                styles = styles.concat(flowStyle);\r\n              }\r\n            }\r\n            return styles;\r\n          }\r\n        })\r\n        $this.mapData.addLayer($this.vectorLayer);\r\n\r\n      });\r\n    },\r\n    // 初始化地图\r\n    initMap () {\r\n      const mapContainer = this.$refs.map2\r\n      //将图层加入Map\r\n      let map = new Map({\r\n        layers: [gaodeMapLayer],\r\n        target: mapContainer,\r\n        view: view2\r\n      });\r\n      // 添加鼠标点击事件\r\n      map.on('click', this.mapClick);\r\n      // 拖动监听\r\n      map.on('pointerdrag', this.rightPointerdrag);\r\n      // 缩放监听\r\n      map.on('moveend', this.rightMovvend);\r\n      // 保存地图\r\n      this.mapData = map\r\n      //添加文字标注\r\n      this.addMarkTextLayer();\r\n    },\r\n\r\n    getRightPlane () {\r\n      return this.rightPlane;\r\n    },\r\n\r\n    leftPlaneChange () {\r\n      this.mapData.removeLayer(this.vectorLayer);\r\n      this.initVectorLayer();\r\n      this.mapData.addLayer(this.vectorLayer);\r\n    },\r\n\r\n    changeRigthPlane () {\r\n      this.removePopup();\r\n      this.mapData.removeLayer(this.vectorLayer);\r\n      this.initVectorLayer();\r\n      this.mapData.addLayer(this.vectorLayer);\r\n      this.$bas.$emit(\"rightPlaneChange\", this.rightPlane)\r\n    },\r\n\r\n    rightPointerdrag () {\r\n      this.rightCurrentCordinate = view2.getCenter();\r\n      this.rigthtCurrentZoom = view2.getZoom()\r\n      this.$bas.$emit(\"rightPanelDrageChange\", this.rightCurrentCordinate, this.rigthtCurrentZoom)\r\n    },\r\n\r\n\r\n    rightMovvend () {\r\n      this.rightCurrentCordinate = view2.getCenter();\r\n      this.rigthtCurrentZoom = view2.getZoom()\r\n      this.$bas.$emit(\"rightMovvendChange\", this.rightCurrentCordinate, this.rigthtCurrentZoom)\r\n    },\r\n\r\n    showFlowText (this_, isFlow) {\r\n      this_.vectorLayer.setStyle((feature, solution) => {\r\n        let styles = [];\r\n        let pointArrowStyle = this_.getPointsStyle(feature);\r\n        let flowStyle = this_.initFlowOrVocPoint(feature, this_, isFlow)\r\n        if (pointArrowStyle != null && pointArrowStyle.length > 0) {\r\n          styles = styles.concat(pointArrowStyle)\r\n        }\r\n        if (flowStyle != null && flowStyle.length > 0) {\r\n          styles = styles.concat(flowStyle)\r\n        }\r\n        return styles;\r\n      })\r\n\r\n    },\r\n\r\n    hideFlowText (this_) {\r\n      if (this_.vectorLayer) {\r\n        this_.vectorLayer.setStyle(null);\r\n        this_.vectorLayer.setStyle((feature, solution) => {\r\n          let styles = [];\r\n          let pointArrowStyle = this_.getPointsStyle(feature);\r\n          if (pointArrowStyle != null && pointArrowStyle.length > 0) {\r\n            styles = styles.concat(pointArrowStyle)\r\n          }\r\n          return styles;\r\n        })\r\n      }\r\n\r\n    },\r\n\r\n\r\n\r\n    assebleRightTransPopContent (feature, compaireFeature, layer) {\r\n      let compaireResult = {}\r\n      if (compaireFeature != null && compaireFeature != undefined) {\r\n        compaireResult = featureCompaire(feature.properties, compaireFeature.properties);\r\n      }\r\n      let downUrl = require('@/assets/images/nav/down.png');\r\n      let upUrl = require('@/assets/images/nav/up.png');\r\n      let content = `<div style='color:#121924;font-weight: bold;width:100%;z-index:4;height:95px;padding:6px;font-size: 15px'>` + layer + `\r\n        <div style = 'margin-top:10px' ><button id='btn3' style='margin-right:10px;border: none;height: 28px;line-height: 28px;border-radius: 4px;width: 80px;background: #004AB3;color: #ffffff;' onclick=\"preview3()\">基本信息</button>\r\n            <button id='btn4' style=\"border: none;height: 28px;line-height: 28px;border-radius: 4px;width: 80px;background: #D3D6DB;color: #ffffff;\" onclick=\"preview4()\">交通信息</button></div>\r\n            </div>\r\n        <div style='font-size: 10px;width:100%' id='info3'>`\r\n      this.popTransList.forEach(element => {\r\n        let propVal = feature.properties[element.propertie];\r\n        if (propVal != null) {\r\n          let maxLen = element.maxlength;\r\n          let type = element.type;\r\n          //格式化\r\n          if (maxLen != null && type == 'float') {\r\n            propVal = formatFixNum(propVal, maxLen)\r\n          }\r\n          if (type == 'int') {\r\n            propVal = Math.floor(propVal)\r\n          }\r\n          //拼接单位\r\n          let unit = element.unit;\r\n          if (unit != null && propVal != null) {\r\n            propVal = propVal + \"&nbsp\" + unit;\r\n          }\r\n        } else {\r\n          propVal = '';\r\n        }\r\n        content = content + `<div style=\"height: 26px;width:100%\">\r\n                    <a style=\"color:#646566;width:40%;display: inline-block;\">`+ element.label + `:</a>\r\n                    <a style=\"text-align: right;font-size:14px;width:50%;display: inline-block;\">`+ propVal + `</a>`\r\n        if (compaireResult[element.propertie] == '>') {\r\n          content = content + `<img src = ` + upUrl + ` style = 'width:20px;height:18px' />`\r\n        } else if (compaireResult[element.propertie] == '<') {\r\n          content = content + `<img src = ` + downUrl + ` style = 'width:20px;height:18px' />`\r\n        }\r\n        content = content + `</div>`\r\n      });\r\n      content = content + '</div>';\r\n      return content;\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // 弹出框\r\n    addRightPopup (coordinate, feature, compaireFeature) {\r\n      let thisObj = this;\r\n      thisObj.removePopup()\r\n      // 获取弹出层DOM\r\n      let container = document.getElementById('popup2')\r\n      let content = document.getElementById('popup-content2')\r\n      if (thisObj.overlay) {\r\n      } else {\r\n        // 创建Overlay弹出层绑定DOM\r\n        thisObj.overlay = new Overlay({\r\n          element: container\r\n        })\r\n        // 添加到map\r\n        thisObj.mapData.addOverlay(this.overlay)\r\n\r\n      }\r\n      // 道路信息\r\n      let layer = feature.properties.layer == null ? \"\" : feature.properties.layer;\r\n      let handle = feature.properties.handle == null ? \"\" : feature.properties.handle;\r\n      let length = feature.properties.length == null ? \"\" : Math.floor(feature.properties.length) + \" m\";\r\n      let capacity = feature.properties.capacity == null ? \"\" : feature.properties.capacity + ' pcu/h';\r\n      // 方向（1单向，-1反向单向，0双向）\r\n      let dir = feature.properties.dir == 1 ? \"单向\" : feature.properties.dir == -1 ? \"反向单向\" : feature.properties.dir == 0 ? \"双向\" : '';\r\n      //交通流量\r\n      let transPopContent = thisObj.assebleRightTransPopContent(feature, compaireFeature, layer);\r\n      transPopContent = transPopContent + `</div>\r\n          </div>\r\n          <div style='font-size: 10px;width:100%' id='info4'>\r\n            <div style=\"height: 26px;width:100%\">\r\n              <a style=\"color:#646566;width:45%;display: inline-block;\">道路ID:</a>\r\n              <a style=\"text-align: right;font-size:14px;width:50%;display: inline-block;\">`+ handle + `</a>\r\n            </div>\r\n            <div style=\"height: 26px;width:100%\">\r\n              <a style=\"color:#646566;width:45%;display: inline-block;\">等级:</a>\r\n              <a style=\"text-align: right;font-size:14px;width:50%;display: inline-block;\">`+ layer + `</a>\r\n            </div>\r\n            <div style=\"height: 26px;width:100%\">\r\n              <a style=\"color:#646566;width:45%;display: inline-block;\">长度:</a>\r\n              <a style=\"text-align: right;font-size:14px;width:50%;display: inline-block;\">`+ length + `</a>\r\n            </div>\r\n            <div style=\"height: 26px;width:100%\">\r\n              <a style=\"color:#646566;width:45%;display: inline-block;\">通行能力:</a>\r\n              <a style=\"text-align: right;font-size:14px;width:50%;display: inline-block;\">`+ capacity + `</a>\r\n            </div>\r\n             <div style=\"height: 26px;width:100%\">\r\n              <a style=\"color:#646566;width:45%;display: inline-block;\">方向:</a>\r\n              <a style=\"text-align: right;font-size:14px;width:50%;display: inline-block;\">`+ dir + `</a>\r\n            </div>\r\n          </div>`;\r\n      content.innerHTML = transPopContent;\r\n      // 设置弹出层位置即可出现\r\n      thisObj.overlay.setPosition(coordinate)\r\n      document.getElementById('info3').style.display = 'none';\r\n      document.getElementById('popup2').style.display = 'block';\r\n    },\r\n\r\n    // 清除弹出框\r\n    removePopup () {\r\n      if (this.overlay) {\r\n        // 设置位置undefined可达到隐藏清除弹出框\r\n        this.overlay.setPosition(undefined)\r\n      }\r\n    },\r\n    removeBtn () {\r\n      if (this.overlay) {\r\n        // 设置位置undefined可达到隐藏清除弹出框\r\n        this.overlay.setPosition(undefined)\r\n        if (document.getElementById('popup').style.display == 'block') {\r\n          document.getElementById('popup').style.display = 'none'\r\n        }\r\n        this.clearHighlight()\r\n        //清除对面高亮\r\n        this.$bas.$emit('clearHighlight_Y', '1')\r\n      }\r\n    },\r\n\r\n    parseFeatureDetail (featureResp, feature) {\r\n      if (!featureResp) {\r\n        return null;\r\n      }\r\n      var jsonObj = JSON.parse(featureResp);\r\n      var features = jsonObj.features;\r\n      if (features == null || features.length == 0) {\r\n        return null;\r\n      }\r\n      let compaireFeature;\r\n      for (let k = 0; k < features.length; k++) {\r\n        let properties = features[k].properties;\r\n        if (properties.layer == feature.properties.layer\r\n          && feature.properties.handle == properties.handle) {\r\n          compaireFeature = features[k];\r\n          break;\r\n        }\r\n      }\r\n      return compaireFeature;\r\n\r\n    },\r\n\r\n\r\n    //根据道路ID查询对比方案详情\r\n    assembleRightCompairePop (feature, thisObj, evt) {\r\n      let selectedPlaneVal = thisObj.leftSelectedPlane;\r\n      if (selectedPlaneVal == null || selectedPlaneVal == undefined) {\r\n        selectedPlaneVal = 1;\r\n      }\r\n      let handle = feature.properties.handle\r\n      if (handle == null) {\r\n        thisObj.addRightPopup(evt.coordinate, feature, null);\r\n        return;\r\n      }\r\n      let leftLayerName;\r\n      newList.forEach(item => {\r\n        if (item.value == selectedPlaneVal) {\r\n          leftLayerName = item.layerName\r\n        }\r\n      })\r\n      if (!leftLayerName) {\r\n        thisObj.addRightPopup(evt.coordinate, feature, null);\r\n        return;\r\n      }\r\n      let propertyName = 'Test:handle';\r\n      let respProperties = 'layer,handle,length,capacity,ab_flow,ba_flow,tot_flow,ab_voc,ba_voc,max_voc,geom';\r\n      let url = process.env.VUE_APP_GIS_BASE_URL + '/wfs?request=GetFeature&version=1.1.0&typeName='\r\n        + leftLayerName + '&propertyName=' + respProperties + '&outputFormat=JSON&FILTER=<Filter xmlns=\"http://www.opengis.net/ogc\"><PropertyIsEqualTo><PropertyName>'\r\n        + propertyName + '</PropertyName><Literal>' + handle + '</Literal></PropertyIsEqualTo></Filter>'\r\n      //请求url对比方案道路详情\r\n      fetch(url)\r\n        .then(function (response) {\r\n          return response.text();\r\n        })\r\n        .then(function (info) {\r\n          if (info != null) {\r\n            let compaireFeature = thisObj.parseFeatureDetail(info, feature);\r\n            thisObj.addRightPopup(evt.coordinate, feature, compaireFeature);\r\n            //弹出左边弹出框\r\n            thisObj.$emit('addLeftPopupByParent', evt.coordinate, compaireFeature, feature);\r\n\r\n          } else {\r\n            thisObj.addRightPopup(evt.coordinate, feature, null);\r\n          }\r\n        })\r\n\r\n\r\n    },\r\n\r\n\r\n\r\n    // 鼠标点击地图事件\r\n    mapClick (evt) {\r\n      let pixel = this.mapData.getEventPixel(evt.originalEvent);\r\n      let feature = this.mapData.forEachFeatureAtPixel(pixel,\r\n        function (feature, layer) {\r\n          return feature;\r\n        });\r\n      if (feature) {\r\n        //捕捉到要素后，弹框\r\n        let featureConvert = convertFeature(feature);\r\n        this.addHighLightStyle(feature, this, '')\r\n        this.assembleRightCompairePop(featureConvert, this, evt);\r\n      } else {\r\n        this.removeBtn();\r\n      }\r\n\r\n    },\r\n    addHighLightStyle (clickFeature, thisObj, num) {\r\n      let featureObj = [];\r\n      featureObj.push(clickFeature);\r\n      this.clearHighlight();\r\n      let highLightStyle = new Style({\r\n        fill: new Fill({\r\n          color: \"#ffff00\",\r\n        }),\r\n        stroke: new Stroke({\r\n          color: \"#ffff00\",\r\n          width: 8\r\n        }),\r\n      })\r\n      thisObj.highLightLayer = new VectorLayer({\r\n        name: \"dk\",\r\n        source: new VectorSource({\r\n          features: featureObj,\r\n        }),\r\n        style: (feature, solution) => {\r\n          return highLightStyle;\r\n        }\r\n      })\r\n      thisObj.highLightLayer.set(\"id\", \"highlightLayer\")\r\n      this.mapData.addLayer(thisObj.highLightLayer)\r\n      if (num === '') {\r\n        //右边高亮\r\n        this.$bas.$emit(\"addLeftHighLightStyle\", clickFeature, thisObj, '1')\r\n      }\r\n    },\r\n    //删除高亮图层\r\n    clearHighlight () {\r\n      let arr = this.mapData.getLayers().array_\r\n      let highlightLayer = {}\r\n      arr.forEach(item => {\r\n        if (item.get(\"id\") == \"highlightLayer\") {\r\n          highlightLayer = item\r\n        }\r\n      })\r\n      if (highlightLayer && highlightLayer.className_) {\r\n        this.mapData.removeLayer(highlightLayer)\r\n      }\r\n    },\r\n    initComponentInfo () {\r\n      let param = {};\r\n      this.options=[]\r\n      param.bizKey = 'plane_compare'\r\n      initTreeList(param).then(res=> {\r\n        let responseData = res.data[0].children;\r\n        //初始化页面选择默认第一个\r\n        responseData[1].children.forEach(s=>{\r\n          this.rightPlaneList.push({\r\n            layerName: s.layerName,\r\n            name:s.name, \r\n            value: s.id,\r\n            bizVal: s.parentId\r\n          })\r\n        })\r\n        //newlist 获取全部的数据 筛选用\r\n        responseData.forEach(ss=>{\r\n          ss.children.forEach(r=>{\r\n            newList.push({\r\n            layerName: r.layerName,\r\n            name:r.name, \r\n            value: r.id,\r\n            bizVal: r.parentId,\r\n          })\r\n        })\r\n        })\r\n      parentVal=responseData[0].id\r\n      this.leftSelectedPlane=this.rightPlaneList[0].value\r\n      this.rightPlane=this.rightPlaneList[1].value\r\n      // 初始化图层\r\n      this.initVectorLayer();\r\n      });\r\n    },\r\n\r\n  }\r\n\r\n\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '~@/assets/styles/popup.scss';\r\n@import '~@/assets/styles/traffic.scss';\r\n.content {\r\n  position: relative;\r\n}\r\n.select-div {\r\n  left: 28px;\r\n  top: 70px;\r\n  padding: 10px 16px 0 16px;\r\n}\r\n</style>\r\n"]}]}