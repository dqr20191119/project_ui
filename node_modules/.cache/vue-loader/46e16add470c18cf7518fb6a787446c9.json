{"remainingRequest":"D:\\work\\proj\\project_manage\\project-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\work\\proj\\project_manage\\project-ui\\src\\views\\index.vue?vue&type=style&index=0&id=a83bd3b0&scoped=true&lang=scss&","dependencies":[{"path":"D:\\work\\proj\\project_manage\\project-ui\\src\\views\\index.vue","mtime":1663479653279},{"path":"D:\\work\\proj\\project_manage\\project-ui\\node_modules\\css-loader\\dist\\cjs.js","mtime":1663230084856},{"path":"D:\\work\\proj\\project_manage\\project-ui\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1663230088519},{"path":"D:\\work\\proj\\project_manage\\project-ui\\node_modules\\postcss-loader\\src\\index.js","mtime":1663230086089},{"path":"D:\\work\\proj\\project_manage\\project-ui\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1663230084018},{"path":"D:\\work\\proj\\project_manage\\project-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1663230084016},{"path":"D:\\work\\proj\\project_manage\\project-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":1663230087832}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5vbC1wb3B1cCB7DQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgYm90dG9tOiAwLjE4NzVyZW07DQogIGxlZnQ6IC0yLjExMjVyZW07DQogIHdpZHRoOiA0Ljg4NzVyZW07DQogIGJvcmRlci1yYWRpdXM6IDAuMDYyNXJlbTsNCiAgcGFkZGluZzogMC4xMjVyZW0gMC4xODc1cmVtOw0KICBiYWNrZ3JvdW5kOiAjZmZmZmZmOw0KICBib3JkZXI6IDAuMDEyNXJlbSBzb2xpZCAjZDJlM2ZhOw0KICBib3gtc2hhZG93OiAwIDAuMTI1cmVtIDAuMjVyZW0gMC4wMTI1cmVtIHJnYmEoMTM4LCAxNDQsIDE1MywgMC40KTsNCiAgY29sb3I6ICM0YTRhNGE7DQp9DQoub2wtcG9wdXAtY2xvc2VyIHsNCiAgcG9zaXRpb246IGFic29sdXRlOw0KICB0b3A6IDAuMXJlbTsNCiAgY29sb3I6ICM5OTk5OTk7DQogIGZvbnQtd2VpZ2h0OiBib2xkOw0KICBmb250LXNpemU6IDAuMTI1cmVtOw0KICByaWdodDogMC4xcmVtOw0KfQ0KLnBvcHVwLW5hdi10aXRsZSB7DQogIGRpc3BsYXk6IGZsZXg7DQogIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsNCn0NCi5wb3B1cC1uYXYtdGl0bGUgc3BhbjpmaXJzdC1jaGlsZCB7DQogIGNvbG9yOiAjMDAwOw0KfQ0KLnBvcHVwLW5hdi10aXRsZSBzcGFuOmxhc3QtY2hpbGQgew0KICBjb2xvcjogIzcwNzA3MDsNCiAgZm9udC1zaXplOiAwLjE1cmVtOw0KfQ0KLmVsLWRpdmlkZXItLWhvcml6b250YWwgew0KICBtYXJnaW46IDAuMTg3NXJlbSAwOw0KfQ0KLnBvcHVwLW5hdi1pdGVtIHsNCiAgZGlzcGxheTogZmxleDsNCiAgY29sb3I6ICM0YTRhNGE7DQp9DQoucG9wdXAtbmF2LWljb24gew0KICBtYXJnaW4tcmlnaHQ6IDAuMXJlbTsNCiAgd2lkdGg6IDAuMTg3NXJlbTsNCn0NCi5wb3B1cC1pdGVtIHsNCiAgZm9udC1zaXplOiAwLjE3NXJlbTsNCiAgbWFyZ2luLWJvdHRvbTogMC4xcmVtOw0KfQ0KLmp0LWljb24gew0KICB3aWR0aDogMC4zNzVyZW07DQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgYm90dG9tOiAtMC4xNzVyZW07DQogIGxlZnQ6IDEuOTI1cmVtOw0KfQ0KOjp2LWRlZXAgLmVsLWNoZWNrYm94IHsNCiAgcG9zaXRpb246IHJlbGF0aXZlOw0KICBkaXNwbGF5OiBibG9jazsNCiAgaGVpZ2h0OiAwLjMyNXJlbTsNCn0NCi5lbC1jaGVja2JveC1ncm91cCB7DQogIHdpZHRoOiAxMDAlOw0KfQ0KLmNvbG9yQm94IHsNCiAgd2lkdGg6IDAuNnJlbTsNCiAgaGVpZ2h0OiAwLjE1cmVtOw0KICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7DQogIGJvcmRlci1yYWRpdXM6IDAuMDI1cmVtOw0KICBwb3NpdGlvbjogYWJzb2x1dGU7DQogIHJpZ2h0OiAwLjEyNXJlbTsNCn0NCi5yb2FkLXNlbGVjdG9yLXBvcCB7DQogIHdpZHRoOiAxLjVyZW07DQogIGhlaWdodDogMi41cmVtOw0KICB6LWluZGV4OiAyMDAwMDA7DQogIHBvc2l0aW9uOiBmaXhlZDsNCiAgbWFyZ2luLWxlZnQ6IDAuODc1cmVtOw0KICBtYXJnaW4tdG9wOiAwLjY4NzVyZW07DQogIC5wb3AtdGl0bGUgew0KICAgIGZvbnQtd2VpZ2h0OiBib2xkOw0KICAgIGZvbnQtc2l6ZTogMC4xNzVyZW07DQogIH0NCn0NCi5lbC1jb2xsYXBzZS1pdGVtIHsNCiAgd2lkdGg6IDMuMjVyZW07DQogIGhlaWdodDogMC41NXJlbTsNCiAgb3BhY2l0eTogMTsNCg0KICA6OnYtZGVlcCAuZWwtY29sbGFwc2UtaXRlbV9faGVhZGVyIHsNCiAgICBoZWlnaHQ6IDAuNTVyZW07DQogICAgcGFkZGluZy1sZWZ0OiAwLjEyNXJlbTsNCiAgICBiYWNrZ3JvdW5kOiAjZmZmZmZmOw0KICAgIGJveC1zaGFkb3c6IDAgMC4xMjVyZW0gMC4yNXJlbSAwLjAxMjVyZW0gcmdiYSgxMzgsIDE0NCwgMTUzLCAwLjQpOw0KICAgIGJvcmRlci1yYWRpdXM6IDAuMXJlbTsNCiAgfQ0KfQ0KOjp2LWRlZXAgLmVsLWNvbGxhcHNlIHsNCiAgYm9yZGVyOiBub25lOw0KICBib3gtc2hhZG93OiAwIDAuMTI1cmVtIDAuMjVyZW0gMC4wMTI1cmVtIHJnYmEoMTM4LCAxNDQsIDE1MywgMC40KTsNCn0NCjo6di1kZWVwIC5lbC1jb2xsYXBzZS1pdGVtX193cmFwIHsNCiAgYm9yZGVyLXJhZGl1czogMCAwIDAuMXJlbSAwLjFyZW07DQogIG1hcmdpbi10b3A6IC0wLjA2MjVyZW07DQogIGJveC1zaGFkb3c6IDAgMC4xMjVyZW0gMC4yNXJlbSAwLjAxMjVyZW0gcmdiYSgxMzgsIDE0NCwgMTUzLCAwLjQpOw0KfQ0KLmRvdCB7DQogIHdpZHRoOiAwLjNyZW07DQogIGhlaWdodDogMC4xMjVyZW07DQogIGJvcmRlci1yYWRpdXM6IDAuMDI1cmVtOw0KICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7DQogIG1hcmdpbi1sZWZ0OiAwLjFyZW07DQp9DQo6OnYtZGVlcCAuZWwtdHJlZS1ub2RlX19jaGlsZHJlbiB7DQogIG92ZXJmbG93OiBpbml0aWFsICFpbXBvcnRhbnQ7DQp9DQouY2hhbmdlLWRpdiB7DQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgcmlnaHQ6IDAuMjVyZW07DQogIHRvcDogMC4zNzVyZW07DQogIHotaW5kZXg6IDk5OTsNCiAgLnN3aXRjaC1idG4gew0KICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsNCiAgICB3aWR0aDogMS4yODc1cmVtOw0KICAgIGhlaWdodDogMC40NzVyZW07DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KICAgIGJhY2tncm91bmQ6ICMwMDFkNDA7DQogICAgYm94LXNpemluZzogYm9yZGVyLWJveDsNCiAgICBib3JkZXI6IDAuMDI1cmVtIHNvbGlkICMzMzZiYjQ7DQogICAgZm9udC1zaXplOiAwLjE3NXJlbTsNCiAgICBmb250LXdlaWdodDogYm9sZDsNCiAgICBsaW5lLWhlaWdodDogMC40Mzc1cmVtOw0KICAgIGNvbG9yOiAjZmZmZmZmOw0KICAgIGN1cnNvcjogcG9pbnRlcjsNCiAgfQ0KICAubGVmdC1idG4gew0KICAgIGJvcmRlci1yYWRpdXM6IDAuMjM3NXJlbSAwIDAgMC4yMzc1cmVtOw0KICAgIG1hcmdpbi1yaWdodDogMC4xcmVtOw0KICB9DQogIC5yaWdodC1idG4gew0KICAgIGJvcmRlci1yYWRpdXM6IDAgMC4yMzc1cmVtIDAuMjM3NXJlbSAwOw0KICAgIG1hcmdpbi1sZWZ0OiAwLjFyZW07DQogIH0NCiAgLnN3aXRjaC1idG46aG92ZXIgew0KICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxODBkZWcsICMyY2E2ZmYgMzclLCAjMDBmZmI3IDEwMCUpOw0KICAgIGNvbG9yOiAjZmZmZmZmOw0KICB9DQogIC5idG4tYWN0aXZlIHsNCiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCAjMmNhNmZmIDM3JSwgIzAwZmZiNyAxMDAlKTsNCiAgICBjb2xvcjogI2ZmZmZmZjsNCiAgfQ0KfQ0KLyog6K6+572u5rua5Yqo5p2h55qE5qC35byPICovDQo6Oi13ZWJraXQtc2Nyb2xsYmFyIHsNCiAgd2lkdGg6IDAuMDc1cmVtOw0KfQ0KLyog5rua5Yqo5qe9ICovDQo6Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrIHsNCiAgLXdlYmtpdC1ib3gtc2hhZG93OiBpbnNldDAwNnB4cmdiYSgwLCAwLCAwLCAwLjMpOw0KICBib3JkZXItcmFkaXVzOiAwLjFyZW07DQp9DQovKiDmu5rliqjmnaHmu5HlnZcgKi8NCjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIgew0KICBib3JkZXItcmFkaXVzOiAwLjA3NXJlbTsNCiAgYmFja2dyb3VuZDogI2ViZWVmNTsNCiAgLXdlYmtpdC1ib3gtc2hhZG93OiBpbnNldDAwNnB4cmdiYSgwLCAwLCAwLCAwLjUpOw0KfQ0KOjotd2Via2l0LXNjcm9sbGJhci10aHVtYjp3aW5kb3ctaW5hY3RpdmUgew0KICBiYWNrZ3JvdW5kOiAjZWJlZWY1Ow0KfQ0KLnRyZWUtZGl2IHsNCiAgaGVpZ2h0OiA0cmVtOw0KICBvdmVyZmxvdzogYXV0bzsNCn0NCg=="},{"version":3,"sources":["index.vue"],"names":[],"mappingswfile":"index.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div id=\"map\" ref=\"map\">\r\n    <!--点击查看详情弹框-->\r\n    <div id=\"popup\" class=\"ol-popup\">\r\n      <div class=\"popup-nav-title\">\r\n        <span>{{ this.projectName }}</span>\r\n        <span>{{ this.status }}</span>\r\n      </div>\r\n      <el-divider></el-divider>\r\n      <div v-show=\"this.projectDesc != ''\">\r\n        <el-row class=\"popup-item\">\r\n          <el-col :span=\"12\">\r\n            <img src=\"../assets/images/fly_pre.png\" class=\"popup-nav-icon\" />\r\n            <span>{{ this.start }}</span>\r\n            <img\r\n              src=\"../assets/images/right.png\"\r\n              style=\"width: 16px; float: right; margin-right: 0.125rem\"\r\n            />\r\n          </el-col>\r\n\r\n          <el-col :span=\"12\">\r\n            <img src=\"../assets/images/fly_nor.png\" class=\"popup-nav-icon\" />\r\n            <span>{{ this.end }}</span>\r\n          </el-col>\r\n        </el-row>\r\n        <el-row class=\"popup-item\">\r\n          <el-col :span=\"12\">\r\n            <img src=\"../assets/images/cd.png\" class=\"popup-nav-icon\" />\r\n            <span>长度（KM）:{{ this.length }}</span>\r\n          </el-col>\r\n\r\n          <el-col :span=\"12\">\r\n            <img src=\"../assets/images/tz.png\" class=\"popup-nav-icon\" />\r\n            <span>总投资（亿元）:{{ this.ztz }}</span>\r\n          </el-col>\r\n        </el-row>\r\n        <div class=\"popup-item\">\r\n          <span>项目概况</span>\r\n          <i\r\n            class=\"el-icon-caret-right\"\r\n            v-show=\"this.projectDesc != '' && showGk === false\"\r\n            @click=\"showGk = true\"\r\n          ></i>\r\n          <i\r\n            class=\"el-icon-caret-bottom\"\r\n            @click=\"showGk = false\"\r\n            v-show=\"showGk === true\"\r\n          ></i>\r\n          <span v-show=\"this.showGk === true\">{{ this.projectDesc }}</span>\r\n        </div>\r\n        <div class=\"popup-item\">\r\n          <span>勘察设计费复核:</span>\r\n          <span>{{ this.kcsjffh }}</span>\r\n        </div>\r\n        <div class=\"popup-item\">\r\n          <span>备注</span>\r\n          <i\r\n            class=\"el-icon-caret-right\"\r\n            v-show=\"this.bz != '' && showBz === false\"\r\n            @click=\"showBz = true\"\r\n          ></i>\r\n          <i\r\n            class=\"el-icon-caret-bottom\"\r\n            @click=\"showBz = false\"\r\n            v-show=\"showBz === true\"\r\n          ></i>\r\n          <span v-show=\"this.showBz === true\">{{ this.bz }}</span>\r\n        </div>\r\n      </div>\r\n      <img src=\"../assets/images/bg_down.png\" class=\"jt-icon\" />\r\n    </div>\r\n\r\n    <!--图片弹窗-->\r\n    <div v-for=\"(item, index) in imagePopArray\" :key=\"index\">\r\n      <div\r\n        :id=\"'imagePopup' + item\"\r\n        @mousedown.prevent=\"down($event, index + 1)\"\r\n        @mousewheel.prevent=\"scaleDom($event)\"\r\n        style=\"position: relative; width: 250px; height: 250px; display: none\"\r\n      >\r\n        <i\r\n          class=\"el-icon-close ol-popup-closer\"\r\n          @click=\"removeImgPopup(item)\"\r\n        ></i>\r\n        <div :id=\"'imageContent' + item\"></div>\r\n      </div>\r\n    </div>\r\n\r\n    <!--道路选择器-->\r\n    <div id=\"pop-road-selector\" class=\"ol-layer\">\r\n      <div class=\"change-div\">\r\n        <div\r\n          class=\"switch-btn left-btn\"\r\n          @click=\"changeMap('1')\"\r\n          :class=\"{ 'btn-active': activeBtn == 1 }\"\r\n        >\r\n          卫星图\r\n        </div>\r\n        <div\r\n          class=\"switch-btn\"\r\n          @click=\"changeMap('2')\"\r\n          :class=\"{ 'btn-active': activeBtn == 2 }\"\r\n        >\r\n          电子地图\r\n        </div>\r\n        <div\r\n          class=\"switch-btn right-btn\"\r\n          @click=\"changeMap('3')\"\r\n          :class=\"{ 'btn-active': activeBtn == 3 }\"\r\n        >\r\n          隐藏底图\r\n        </div>\r\n      </div>\r\n      <div class=\"road-selector-pop\">\r\n        <el-collapse accordion class=\"nav-select\" v-model=\"ac\">\r\n          <el-collapse-item name=\"1\">\r\n            <template slot=\"title\"> 显示图层 </template>\r\n            <el-tree\r\n              class=\"tree-div\"\r\n              ref=\"tree\"\r\n              :data=\"treeData2\"\r\n              show-checkbox\r\n              node-key=\"id\"\r\n              :default-checked-keys=\"defaultCheckedIds\"\r\n              :default-expanded-keys=\"defaultExpandIds\"\r\n              :props=\"defaultProps\"\r\n              @check=\"handleCheckChange\"\r\n            >\r\n              <div class=\"custom-tree-node\" slot-scope=\"{ node, data }\">\r\n                <span>\r\n                  {{ node.label }}\r\n                </span>\r\n                <span\r\n                  v-if=\"data.fillColor != null\"\r\n                  class=\"dot\"\r\n                  :style=\"{ background: data.fillColor }\"\r\n                ></span>\r\n                <span\r\n                  v-else\r\n                  class=\"dot\"\r\n                  :style=\"{ background: data.strokeColor }\"\r\n                ></span>\r\n              </div>\r\n            </el-tree>\r\n          </el-collapse-item>\r\n        </el-collapse>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport 'ol/ol.css'\r\n\r\nimport * as olControl from 'ol/control'\r\n\r\nimport { Map, View, Feature, Collection } from \"ol\";\r\n\r\nimport { getWidth, getCenter } from 'ol/extent'\r\nimport TileLayer from 'ol/layer/Tile'\r\nimport WMTS from 'ol/source/WMTS'\r\nimport XYZ from 'ol/source/XYZ'\r\nimport WMTSTileGrid from 'ol/tilegrid/WMTS'\r\nimport Projection from 'ol/proj/Projection'\r\nimport { transform } from 'ol/proj'\r\nimport proj4 from 'proj4'\r\nimport { register } from 'ol/proj/proj4';\r\nimport VectorSource from 'ol/source/Vector'\r\nimport { TileWMS } from 'ol/source'\r\nimport VectorLayer from 'ol/layer/Vector'\r\n\r\nimport { Draw, Translate, DragPan } from 'ol/interaction'\r\nimport { Style, Circle, Stroke, Fill } from 'ol/src/style'\r\nimport WKT from 'ol/format/WKT'\r\nimport GeoJSON from 'ol/format/GeoJSON'\r\nimport Overlay from 'ol/Overlay'\r\nimport * as echarts from \"echarts\";\r\nimport axios from 'axios'\r\nimport LineString from 'ol/geom/LineString';\r\nimport MultiLineString from 'ol/geom/MultiLineString';\r\nimport MultiPolygon from 'ol/geom/MultiPolygon';\r\nimport Vue from 'vue'\r\nimport { clone } from \"@/utils/ruoyi\";\r\nimport OlGeomPoint from 'ol/geom/Point'\r\nimport OlStyleStyle from 'ol/style/Style'\r\nimport OlStyleIcon from 'ol/style/Icon'\r\nimport index from \"@/api/index\";\r\nimport Point from 'ol/geom/Point';\r\nimport Text from 'ol/style/Text'\r\nimport { findComponentInfo } from \"@/api/config/component\";\r\nimport { initTree } from \"@/api/tree/tree\";\r\nimport { getHighLightMode } from \"@/api/config/legend\";\r\n\r\nimport { getUrlKey } from '@/utils/request'\r\n\r\n\r\n\r\n\r\n//中心坐标\r\nconst centerCordinate = [656951.22379894, 3560959.26626369]\r\n//坐标定义\r\nproj4.defs(\"EPSG:4548\", \"+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs\");\r\nregister(proj4);\r\n\r\n//地图初始化\r\nconst view = new View({\r\n  center: transform(centerCordinate, 'EPSG:4548', 'EPSG:3857'),\r\n  minZoom: 4,\r\n  maxZoom: 18,\r\n  zoom: 14.5 // 地图初始化的缩放级别\r\n})\r\n\r\n\r\n//高德地图图层\r\nconst gaodeMapLayer = new TileLayer({\r\n  source: new XYZ({\r\n    zIndex: 1,\r\n    url: 'http://webst0{1-4}.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scl=2&style=7&x={x}&y={y}&z={z}'\r\n  })\r\n});\r\n\r\n//卫星地图\r\n// const wxMapLayer = new TileLayer({\r\n//   source: new XYZ({\r\n//     crossOrigin: \"anonymous\",\r\n//     url: 'http://t0.tianditu.gov.cn/img_w/wmts?tk=129364168580e7f0e3ff5bd759d41a75&SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=img&STYLE=default&TILEMATRIXSET=w&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}&FORMAT=tiles'\r\n//   })\r\n// });\r\n\r\nconst wxMapLayer = new TileLayer({\r\n  source: new XYZ({\r\n    url: 'http://webst0{1-4}.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=6&x={x}&y={y}&z={z}'\r\n  })\r\n});\r\n\r\n\r\n\r\nexport default {\r\n  name: \"project\",\r\n  mixins: [index],\r\n  data () {\r\n    return {\r\n      ac: '1',\r\n      value1: 'true',\r\n      radio2: [],\r\n      addForm: {\r\n        sDeptName: '',\r\n        sDeptId: ''\r\n      },\r\n      //图层对象数组\r\n      layerArray: [],\r\n      //树结构数据\r\n      treeData2: [],\r\n      //默认选中节点\r\n      defaultCheckedIds: [],\r\n      //默认扩展节点\r\n      defaultExpandIds: [],\r\n      //临时图片弹框数组\r\n      imgPopDivArray: [],\r\n      markLayerArray: [],\r\n      defaultProps: {\r\n        children: 'children',\r\n        label: 'label'\r\n      },\r\n\r\n      imagePopArray: [],\r\n      imageOverLayArray: [],\r\n      textMarkLayerNmArray: [],\r\n\r\n      markMinZoom: 14.5,\r\n      markFlag: false,\r\n      markVectorArray: [],\r\n      showGk: false,\r\n      showBz: false,\r\n      projectName: '',\r\n      start: '',\r\n      end: '',\r\n      projectDesc: '',\r\n      length: '',\r\n      ztz: '',\r\n      status: '',\r\n      bz: '',\r\n      kcsjffh: '',\r\n      isDragable: false,//是否可以拖动\r\n      currentX: '', //点击时鼠标距左边的距离\r\n      currentY: '',//点击时鼠标距顶边的距离\r\n      objX: '', //点击时元素距左边的距离\r\n      objY: '', //点击时元素距顶边的距离\r\n      activeBtn: '2'\r\n    }\r\n  },\r\n  mounted () {\r\n\r\n\r\n    //获取菜单ID\r\n    this.menuId = getUrlKey('menuId');\r\n    //根据菜单ID查询组件信息\r\n    this.findComponentInfo(this);\r\n    this.removePopup();\r\n    document.getElementById('popup').style.display = 'none';\r\n\r\n\r\n  },\r\n\r\n  watch: {\r\n\r\n    defaultCheckedIds: function () {\r\n      //初始化地图\r\n      this.initLayerToMapWfs(this);\r\n      //添加自定义图层\r\n      let checkedIds = this.getTreecheckedId(this.treeData2);\r\n      this.addVectorLayerWfs(checkedIds);\r\n    }\r\n  },\r\n\r\n\r\n\r\n\r\n\r\n  methods: {\r\n\r\n\r\n\r\n\r\n    findComponentInfo (_this) {\r\n      findComponentInfo(this.menuId, null).then(response => {\r\n        if (!response.data) {\r\n          return;\r\n        }\r\n        let legendConfigData = response.data.decLegendConfigList;\r\n        if (legendConfigData && legendConfigData.length > 0) {\r\n          //设置树节点数据\r\n          let treeData_ = legendConfigData[0];\r\n          //隐藏设置的节点\r\n          _this.treeData2 = treeData_;\r\n          //设置顶级菜单选中\r\n          let expandIds = [];\r\n          for (let k = 0; k < treeData_.length; k++) {\r\n            let item = treeData_[k];\r\n            if (item.parentId == null) {\r\n              let children_ = item.children;\r\n              if (children_ != null && children_.length != 0) {\r\n                for (let j = 0; j < children_.length; j++) {\r\n                  expandIds.push(children_[j].id);\r\n                }\r\n              } else {\r\n                expandIds.push(item.id);\r\n              }\r\n            }\r\n          }\r\n          //默认展展开二级菜单\r\n          this.defaultExpandIds = expandIds;\r\n          this.defaultCheckedIds = _this.getTreecheckedId(treeData_);\r\n        }\r\n\r\n      });\r\n    },\r\n\r\n\r\n\r\n    // 初始化地图\r\n    initLayerToMapWfs (_this) {\r\n\r\n      const mapContainer = _this.$refs.map\r\n      wxMapLayer.setVisible(false)\r\n      let layers = [gaodeMapLayer, wxMapLayer];\r\n      //将图层加入Map\r\n      const map = new Map({\r\n        layers: layers,\r\n        target: mapContainer,\r\n        view: view\r\n      });\r\n      // 添加鼠标点击事件\r\n      map.on('click', _this.mapClick);\r\n      map.on('moveend', this.mapMoveend);\r\n      // 保存地图\r\n      _this.mapData = map\r\n    },\r\n\r\n    assembleLayerItems (item, arr, m, checkedArray) {\r\n      var newItem = null;\r\n      if (item.layerName != null) {\r\n        var needAdd = item.filterValue || (item.children != null && item.children != undefined);\r\n        if (!needAdd) {\r\n          return;\r\n        }\r\n\r\n        let existItem;\r\n        for (let j = 0; j < m.length; j++) {\r\n          if (m[j].layerName == item.layerName) {\r\n            existItem = m[j];\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (existItem != null) {\r\n          arr = existItem.treeDataItem;\r\n        } else {\r\n          arr = [];\r\n          newItem = {};\r\n          newItem.treeDataItem = arr;\r\n          newItem.layerName = item.layerName;\r\n          newItem.filterKey = item.filterKey;\r\n        }\r\n      }\r\n\r\n      //选中状态\r\n      var idIndex = checkedArray.findIndex(item2 => {\r\n        return item2 == item.id;\r\n      });\r\n\r\n      if (idIndex != -1) {\r\n        if (newItem != null) {\r\n          m.push(newItem);\r\n        }\r\n        if (item.filterValue != null) {\r\n          arr.push(item);\r\n        }\r\n        if (item.children != null && item.children != undefined) {\r\n          item.children.forEach(i => {\r\n            this.assembleLayerItems(i, arr, m, checkedArray);\r\n          })\r\n        }\r\n      }\r\n    },\r\n\r\n    //递归获节点信息\r\n    getCheckedIdsRecur (item, ids_) {\r\n      if (item.id && item.checkStatus == 'Y') {\r\n        ids_ = (ids_ == null ? [] : ids_);\r\n        ids_.push(item.id);\r\n      }\r\n      //如果子节点选中，需要将父节半选中状态节点加入\r\n      let currentLen = ids_.length;\r\n      if (item.children != null) {\r\n        item.children.forEach(item => {\r\n          this.getCheckedIdsRecur(item, ids_)\r\n        })\r\n        if (currentLen < ids_.length && ids_.indexOf(item.id) == -1) {\r\n          ids_.push(item.id);\r\n        }\r\n      }\r\n    },\r\n\r\n    //获取树所有的节点信息\r\n    getTreecheckedId (treeData) {\r\n      let ids = [];\r\n      treeData.forEach(item => {\r\n        this.getCheckedIdsRecur(item, ids);\r\n      })\r\n      return ids;\r\n    },\r\n\r\n\r\n\r\n    initSingleLayer (featuresData, param, dataItem, _this) {\r\n      let layerName = param.layerName;\r\n      let vectorSourceTmp;\r\n      if (layerName == 'Test:xzxw' || layerName == 'Test:jqxw' || layerName == 'Test:yqxw') {\r\n        vectorSourceTmp = new VectorSource({\r\n          features: (new GeoJSON({ featureProjection: 'EPSG:3857', dataProjection: 'EPSG:4326' })).readFeatures(featuresData)\r\n        });\r\n      } else {\r\n        vectorSourceTmp = new VectorSource({\r\n          features: (new GeoJSON({ featureProjection: 'EPSG:3857', dataProjection: 'EPSG:4548' })).readFeatures(featuresData)\r\n        });\r\n      }\r\n      let vectorLayerTmp = new VectorLayer({\r\n        source: vectorSourceTmp,\r\n        name: layerName,\r\n        filterVal: param.filterVal,\r\n        style: (feature, solution) => {\r\n          return _this.initLayerStyle(feature, dataItem, vectorLayerTmp);\r\n        }\r\n      })\r\n\r\n      console.log(param.layerName + \":\" + param.filterVal);\r\n      _this.mapData.addLayer(vectorLayerTmp);\r\n      _this.layerArray.push(vectorLayerTmp);\r\n\r\n    },\r\n\r\n\r\n\r\n    //添加单个图层信息\r\n    addSingleLayer (_this, layerName, dataItem) {\r\n      let filterKey = dataItem.filterKey;\r\n      let filterVal = dataItem.filterValue;\r\n      if (!layerName || !filterVal) {\r\n        return;\r\n      }\r\n      var url = process.env.VUE_APP_GIS_BASE_URL + '/Test/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=' + encodeURIComponent(layerName)\r\n        + '&maxFeatures=500000000&outputFormat=application%2Fjson&cql_filter=' + encodeURIComponent(filterKey) + '=' + encodeURIComponent(\"'\" + filterVal + \"'\");\r\n      let param = {\r\n        layerName: layerName,\r\n        filterVal: filterVal\r\n      }\r\n      console.log(decodeURIComponent(url))\r\n      axios.get(url, param, { timeout: 1200000 }).then(function (res) {\r\n        var featuresData = res.data;\r\n        if (featuresData) {\r\n\r\n          _this.initSingleLayer(featuresData, param, dataItem, _this)\r\n        }\r\n      })\r\n\r\n    },\r\n\r\n    //根据图层名字以及过滤属性值获取图层信息(线和面文件同时查询处理)\r\n    getAreaLineLays (layerName, filterVal) {\r\n      let arrays_ = [];\r\n      let isEqual = false;\r\n      for (let i = 0; i < this.areaLineFilterVals.length; i++) {\r\n        for (let key in this.areaLineFilterVals[i]) {\r\n          if (arrays_.indexOf(key) == -1) {\r\n            arrays_.push(key)\r\n          }\r\n          if (key == layerName && this.areaLineFilterVals[i][layerName] == filterVal) {\r\n            isEqual = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      if (isEqual) {\r\n        return arrays_;\r\n      } else {\r\n        arrays_ = [];\r\n        arrays_.push(layerName)\r\n        return arrays_;\r\n      }\r\n    },\r\n\r\n\r\n    addVectorLayerWfs (checkedArray) {\r\n      let _this = this;\r\n      let checkedLayerMap = this.getLayerMap(checkedArray);\r\n      for (let k = 0; k < checkedLayerMap.length; k++) {\r\n        let item = checkedLayerMap[k];\r\n        let treeDataItems_ = item.treeDataItem;\r\n        let layerName_ = item.layerName;\r\n        if (!treeDataItems_ || treeDataItems_.length == 0 || !layerName_) {\r\n          continue;\r\n        }\r\n        for (let i = 0; i < treeDataItems_.length; i++) {\r\n          var filterVal = treeDataItems_[i].filterValue;\r\n          var filterKey = treeDataItems_[i].filterKey;\r\n          if (!filterKey || !filterVal) {\r\n            continue;\r\n          }\r\n          try {\r\n            //处理线和面两边都存在数据的情况\r\n            let layerFileArray = this.getAreaLineLays(layerName_, filterVal);\r\n            for (let m = 0; m < layerFileArray.length; m++) {\r\n              this.addSingleLayer(this, layerFileArray[m], treeDataItems_[i]);\r\n            }\r\n          } catch (err) {\r\n            console.log(\"图层：\" + layerName_ + \"过滤值：\" + filterVal + \"请求异常：\", err);\r\n          }\r\n        }\r\n      }\r\n      //})\r\n    },\r\n\r\n\r\n\r\n    getLayerMap (checkedArray) {\r\n      if (checkedArray == null) {\r\n        return null;\r\n      }\r\n      var layerMap = [];\r\n      this.treeData2.forEach(item => {\r\n        this.assembleLayerItems(item, null, layerMap, checkedArray);\r\n      })\r\n\r\n      layerMap = layerMap.filter(item => (item.layerName && item.filterKey))\r\n\r\n      return layerMap;\r\n    },\r\n\r\n\r\n    createPointStyle (feature, item) {\r\n      if (!item) {\r\n        return undefined;\r\n      }\r\n      let styles = [];\r\n\r\n      let style = new OlStyleStyle({\r\n        //图标样式\r\n        // image: new OlStyleIcon({\r\n        //   anchor: [10, 18],\r\n        //   scale: 1,\r\n        //   anchorOrigin: 'top-right',\r\n        //   anchorXUnits: 'pixels',\r\n        //   anchorYUnits: 'pixels',\r\n        //   offsetOrigin: 'bottom-left',\r\n        //   opacity: 1,\r\n        //   src: require('../../assets/images/mark.png'),\r\n        // }),\r\n        //文本样式\r\n        text: new Text({\r\n          textAlign: 'center',\r\n          textBaseline: 'middle',\r\n          font: 'normal 0.15rem 微软雅黑',\r\n          text: feature.values_.name,\r\n          offsetY: -25,\r\n          fill: new Fill({\r\n            color: feature.values_.font_color\r\n          }),\r\n          rotation: feature.values_.font_angle * Math.PI / 180,\r\n          padding: [2, 5, 2, 5],\r\n        }),\r\n        // 设置层级\r\n        zIndex: 1999999999\r\n      });\r\n      styles.push(style);\r\n      return styles;\r\n    },\r\n\r\n\r\n    //初始要素样式\r\n    initLayerStyle (feature, item, vectorLayerTmp) {\r\n      let fileType = feature.values_.file_type;\r\n      if (feature.values_.geometry instanceof Point) {\r\n        if (fileType && fileType == 'image') {\r\n          //图片弹框样式\r\n          feature.values_.src = require(\"@/assets/images/img_mark.png\");\r\n          if (this.imagePopArray.indexOf(feature.values_.name) == -1) {\r\n            console.log(feature.values_.name);\r\n            this.imagePopArray.push(feature.values_.name);\r\n          }\r\n          return this.createImageMarkStyle(feature, vectorLayerTmp);\r\n\r\n        } else {\r\n          let layerName = vectorLayerTmp.values_.name;\r\n          if (this.textMarkLayerNmArray.indexOf(layerName) == -1) {\r\n            vectorLayerTmp.setVisible(false)\r\n            vectorLayerTmp.set('initHide', true)\r\n            this.textMarkLayerNmArray.push(layerName);\r\n          }\r\n          vectorLayerTmp.values_.zIndex = 99999999999999\r\n          return this.createPointStyle(feature, item);\r\n        }\r\n      } else {\r\n        return this.initGraphStyle(feature, item);\r\n      }\r\n    },\r\n\r\n    getStyleSetting (feature, item) {\r\n      let style = {};\r\n      let strokeColor = item.strokeColor ? item.strokeColor : (feature.get('border_col') ? feature.get('border_col') : feature.get('line_color'))\r\n      let fillColor = item.fillColor ? item.fillColor : feature.get('fill_color')\r\n      let strokeWidth = item.width ? item.width : (feature.get('border_wid') ? feature.get('border_wid') : feature.get('line_width'))\r\n      style.strokeColor = strokeColor;\r\n      style.fillColor = fillColor;\r\n      style.strokeWidth = strokeWidth;\r\n      return style;\r\n    },\r\n\r\n\r\n\r\n\r\n    initGraphStyle (feature, item) {\r\n      let styles = [];\r\n      var fill_style = feature.get(\"fill_style\");\r\n      if (!item) {\r\n        return undefined;\r\n      }\r\n      let styleSetting = this.getStyleSetting(feature, item);\r\n      var dashOffset = item.dashOffset;\r\n      var dasharray = item.dashArray;\r\n      var lineColor = styleSetting.strokeColor;\r\n      var fillColor = styleSetting.fillColor;\r\n      let strokeWidth = styleSetting.strokeWidth;\r\n      let style = new Style();\r\n      // //线条颜色\r\n      // let strokeColor = item.strokeColor;\r\n      // let strokeWidth = item.width;\r\n      let stroke = null;\r\n      if (lineColor) {\r\n        stroke = new Stroke({\r\n          color: lineColor,\r\n        })\r\n      }\r\n      // if (stroke == null && strokeColor != null) {\r\n      //   stroke = new Stroke({\r\n      //     color: strokeColor,\r\n      //   })\r\n      // }\r\n      if (strokeWidth) {\r\n        if (stroke == null) {\r\n          stroke = new Stroke({\r\n            width: strokeWidth,\r\n          })\r\n        } else {\r\n          stroke.width_ = strokeWidth;\r\n        }\r\n      }\r\n      if (dashOffset) {\r\n\r\n        stroke.lineDashOffset_ = dashOffset;\r\n      }\r\n      if (dasharray) {\r\n\r\n        stroke.lineDash_ = dasharray.split(\",\");\r\n      }\r\n      style.stroke_ = stroke;\r\n      //填充颜色\r\n      if (fillColor && fill_style != '' && fill_style != 'No Fill') {\r\n        let fill = new Fill({\r\n          color: fillColor\r\n        })\r\n        style.fill_ = fill;\r\n      }\r\n\r\n      styles.push(style);\r\n      return styles;\r\n    },\r\n\r\n\r\n\r\n    handleCheckChange (data_) {\r\n      this.clearHighlight();\r\n      this.removePopup();\r\n      let halfCheckNode = this.$refs.tree.getHalfCheckedNodes();\r\n      let halfCheckIds = [];\r\n      halfCheckNode.forEach(item => {\r\n        halfCheckIds.push(item.id)\r\n      });\r\n      //获取选中以及半选中节点\r\n      var checkedArray = this.$refs.tree.getCheckedKeys(false);\r\n      checkedArray = checkedArray.concat(halfCheckIds);\r\n      let checkedLayerArray = this.getLayerMap(checkedArray);\r\n      let currentLayers = this.layerArray;\r\n      //如果当前选中数组为空，当前所有图层隐藏\r\n      if (checkedLayerArray == null || checkedLayerArray.length == 0) {\r\n        currentLayers.forEach(item => {\r\n          item.setVisible(false)\r\n          //this.setLayerVisible(item, false);\r\n        })\r\n        return;\r\n      }\r\n      //获取待添加的图层(图例树初始化部分选中)\r\n      for (let i = 0; i < checkedLayerArray.length; i++) {\r\n        if (!checkedLayerArray[i].layerName) {\r\n          continue;\r\n        }\r\n        let treeDataItem = checkedLayerArray[i].treeDataItem;\r\n        if (!treeDataItem) {\r\n          currentLayers.forEach(item => {\r\n            if (item.values_.name == checkedLayerArray[i].layerName) {\r\n              item.setVisible(false)\r\n\r\n            }\r\n          })\r\n          continue;\r\n        }\r\n        for (let j = 0; j < treeDataItem.length; j++) {\r\n          let item = treeDataItem[j];\r\n          let exist = false;\r\n          for (let n = 0; n < currentLayers.length; n++) {\r\n            let layer = currentLayers[n];\r\n            if (layer.values_.filterVal == item.filterValue &&\r\n              layer.values_.name == checkedLayerArray[i].layerName) {\r\n              exist = true;\r\n              layer.setVisible(true)\r\n              continue;\r\n            }\r\n\r\n          }\r\n\r\n          //新增图层\r\n          if (!exist) {\r\n            console.log(\"新增图层=======================\");\r\n            console.log(checkedLayerArray[i].layerName);\r\n            //处理线和面两边都存在数据的情况\r\n            let layerFileArray = this.getAreaLineLays(checkedLayerArray[i].layerName, item.filterValue);\r\n            for (let m = 0; m < layerFileArray.length; m++) {\r\n              this.addSingleLayer(this, layerFileArray[m], item);\r\n            }\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n\r\n      //隐藏取消勾选的图层\r\n      if (!currentLayers || currentLayers.length == 0) {\r\n        return;\r\n      }\r\n      let existLayer = [];\r\n      for (let k = 0; k < currentLayers.length; k++) {\r\n        let exist = false;\r\n        for (let i = 0; i < checkedLayerArray.length; i++) {\r\n          let tempItems = checkedLayerArray[i].treeDataItem;\r\n          let layArray_ = this.getAreaLineLays(checkedLayerArray[i].layerName, currentLayers[k].values_.filterVal);\r\n          for (let m = 0; m < tempItems.length; m++) {\r\n            if (currentLayers[k].values_.filterVal == tempItems[m].filterValue &&\r\n              currentLayers[k].values_.name == checkedLayerArray[i].layerName) {\r\n              exist = true;\r\n              if (existLayer.indexOf(tempItems[m].filterValue) == -1 && layArray_.length > 1) {\r\n                existLayer.push(tempItems[m].filterValue);\r\n              }\r\n              currentLayers[k].setVisible(true);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (!exist) {\r\n          currentLayers[k].setVisible(false);\r\n\r\n        }\r\n      }\r\n\r\n      //线和面同时查询显示隐藏控制处理\r\n      for (let n = 0; n < currentLayers.length; n++) {\r\n        let exist = false;\r\n        let areaLineConfig = this.getAreaLineLays(currentLayers[n].values_.name, currentLayers[n].values_.filterVal);\r\n        for (let m = 0; m < existLayer.length; m++) {\r\n          if (currentLayers[n].values_.filterVal == existLayer[m] && areaLineConfig.length > 1) {\r\n            exist = true;\r\n            currentLayers[n].setVisible(true);\r\n          }\r\n        }\r\n        if (!exist) {\r\n          if (areaLineConfig.length > 1) {\r\n            currentLayers[n].setVisible(false);\r\n          }\r\n        }\r\n\r\n      }\r\n\r\n\r\n\r\n      // 图片标注关闭开启时控制显示隐藏\r\n      this.imageOverLayArray.forEach(item => {\r\n        if (item.id == filterVal) {\r\n          if (!visible) {\r\n            this.removeImgPopup(item.id);\r\n          } else {\r\n            // console.log(\"ccccc\");\r\n            // console.log(item);\r\n            //this.showImgPopup(item.id, item.values_.position)\r\n          }\r\n        }\r\n      })\r\n\r\n\r\n\r\n    },\r\n\r\n\r\n\r\n    // 弹出框\r\n    addPopup (coordinate, feature) {\r\n      this.removePopup()\r\n      let featureValues = feature.values_;\r\n      this.projectName = featureValues.layer == null ? '' : featureValues.layer;\r\n      this.projectDesc = featureValues.项目概 == null || featureValues.项目概 == undefined ? '' : featureValues.项目概;\r\n      this.start = featureValues.起点 == null ? '' : featureValues.起点;\r\n      this.end = featureValues.终点 == null ? \"\" : featureValues.终点;\r\n      this.length = featureValues.长度 == null ? \"\" : featureValues.长度;\r\n      this.ztz = featureValues.总投资 == null ? \"\" : featureValues.总投资;\r\n      this.kcsjffh = featureValues.勘察_1 == null ? \"\" : featureValues.勘察_1;\r\n      this.status = featureValues.目前工 == null ? \"\" : featureValues.目前工;\r\n      this.bz = featureValues.备注 == null ? \"\" : featureValues.备注;\r\n\r\n      // 获取弹出层DOM\r\n      let container = document.getElementById('popup')\r\n      if (this.projectName === \"0\") {\r\n        return\r\n      }\r\n      if (this.overlay) {\r\n      } else {\r\n        // 创建Overlay弹出层绑定DOM\r\n        this.overlay = new Overlay({\r\n          element: container,\r\n\r\n          autoPan: {\r\n            animation: {\r\n              duration: 250\r\n            }\r\n          }\r\n        })\r\n\r\n        // 添加到map\r\n        this.mapData.addOverlay(this.overlay)\r\n      }\r\n      // 设置弹出层位置即可出现\r\n      this.overlay.setPosition(coordinate)\r\n      document.getElementById('popup').style.display = 'block';\r\n    },\r\n\r\n    // 清除弹出框\r\n    removePopup () {\r\n      if (this.overlay) {\r\n        this.overlay.setPosition(undefined)\r\n        this.showGk = false,\r\n          this.showBz = false\r\n        this.clearHighlight()\r\n      }\r\n\r\n    },\r\n\r\n    //隐藏图片弹框\r\n    removeImgPopup (id) {\r\n      let result = false;\r\n      if (!id) {\r\n        return result;\r\n      }\r\n      let layerArray = this.imageOverLayArray;\r\n      if (layerArray.length == 0) {\r\n        return result;\r\n      }\r\n      layerArray.forEach(item => {\r\n        if (item.id == id) {\r\n\r\n          if (item.values_.position != undefined) {\r\n            result = true;\r\n          }\r\n          item.setPosition(undefined)\r\n        }\r\n      })\r\n      return result;\r\n    },\r\n\r\n    //显示图片弹框\r\n    showImgPopup (id, coordinate) {\r\n      if (!id) {\r\n        return;\r\n      }\r\n      let layerArray = this.imageOverLayArray;\r\n      if (layerArray.length == 0) {\r\n        return;\r\n      }\r\n      layerArray.forEach(item => {\r\n        if (item.id == id) {\r\n          let container = document.getElementById('imagePopup' + id);\r\n          if (container) {\r\n            container.style.display = 'block';\r\n            item.setPosition(coordinate)\r\n          }\r\n        }\r\n      })\r\n    },\r\n\r\n\r\n    //删除高亮图层\r\n    clearHighlight () {\r\n      let arr = this.mapData.getLayers().array_\r\n      let arrayLen = arr.length;\r\n      let remove = 0;\r\n      for (let k = 0; k < arrayLen; k++) {\r\n        let item = arr[k - remove]\r\n        let layerId = item.values_.id\r\n        if (layerId != null && layerId != undefined) {\r\n          if (layerId.indexOf(\"highlightLayer\") != -1) {\r\n            this.mapData.removeLayer(item);\r\n            remove++;\r\n          }\r\n        }\r\n      }\r\n\r\n\r\n    },\r\n\r\n    //根据图层名字高亮\r\n    addHighLightByLayerName (this_, layerName, filterVal) {\r\n      let layerFileArray = this_.getAreaLineLays(layerName, filterVal);\r\n      let featureArray = [];\r\n      for (let m = 0; m < layerFileArray.length; m++) {\r\n        for (let n = 0; n < this_.layerArray.length; n++) {\r\n          if (layerFileArray[m] != this_.layerArray[n].values_.name || this_.layerArray[n].values_.filterVal != filterVal) {\r\n            continue;\r\n          }\r\n          let vectoryResouce = this_.layerArray[n].getSource();\r\n          featureArray = vectoryResouce.featuresRtree_.getAll();\r\n          this_.addHighLightStyle(featureArray, this_, layerFileArray[m]);\r\n        }\r\n      }\r\n    },\r\n\r\n\r\n\r\n\r\n    addHightLigthByLayer (feature, layer, this_) {\r\n      let layerName = layer.values_.name;\r\n      let filterVal = feature.values_.layer;\r\n      let layerFileArray = this_.getAreaLineLays(layerName, filterVal);\r\n      let queryParam = {};\r\n      queryParam.layerNameArray = layerFileArray;\r\n      queryParam.filterValue = filterVal;\r\n      this_.clearHighlight();\r\n      getHighLightMode(queryParam).then(response => {\r\n        let respData = response.data;\r\n        this_.clearHighlight();\r\n        if (respData == null || respData == 'N') {\r\n          let featureArray = [];\r\n          featureArray.push(feature);\r\n          this_.addHighLightStyle(featureArray, this_, layerName);\r\n        } else {\r\n          this_.addHighLightByLayerName(this_, layerName, filterVal);\r\n        }\r\n\r\n\r\n      });\r\n    },\r\n\r\n    createHighLightStyle () {\r\n      let highLightStyle = new Style({\r\n        fill: new Fill({\r\n          color: \"#ffff00\",\r\n        }),\r\n        stroke: new Stroke({\r\n          color: \"#ffff00\",\r\n          width: 3.5\r\n        }),\r\n      })\r\n      return highLightStyle;\r\n    },\r\n\r\n\r\n    addHighLightStyle (featureObj, thisObj, layerName) {\r\n      if (!featureObj) {\r\n        return;\r\n      }\r\n      thisObj.highLightLayer = new VectorLayer({\r\n        zIndex: 9999999999999,\r\n        name: layerName,\r\n        source: new VectorSource({\r\n          features: featureObj,\r\n        }),\r\n        style: (feature, solution) => {\r\n          return thisObj.createHighLightStyle();\r\n        }\r\n      })\r\n      thisObj.highLightLayer.set(\"id\", \"highlightLayer\" + Math.round(Math.random() * 1000))\r\n      this.mapData.addLayer(thisObj.highLightLayer)\r\n\r\n    },\r\n\r\n    changeMap (num) {\r\n      this.activeBtn = num\r\n      if (this.activeBtn == 1) {\r\n        gaodeMapLayer.setVisible(false)\r\n        wxMapLayer.setVisible(true)\r\n        //修改文字标注样式\r\n        this.changeTextStyle(this.activeBtn)\r\n      } else if (this.activeBtn == 2) {\r\n        gaodeMapLayer.setVisible(true)\r\n        wxMapLayer.setVisible(false)\r\n        this.changeTextStyle(this.activeBtn)\r\n      } else if (this.activeBtn == 3) {\r\n        gaodeMapLayer.setVisible(false)\r\n        wxMapLayer.setVisible(false)\r\n        this.changeTextStyle(this.activeBtn)\r\n      }\r\n    },\r\n\r\n    createPointStyleByColor (feature, color) {\r\n      let styles = [];\r\n      let style = new OlStyleStyle({\r\n        // //图标样式\r\n        // image: new OlStyleIcon({\r\n        //   anchor: [10, 18],\r\n        //   scale: 1,\r\n        //   anchorOrigin: 'top-right',\r\n        //   anchorXUnits: 'pixels',\r\n        //   anchorYUnits: 'pixels',\r\n        //   offsetOrigin: 'bottom-left',\r\n        //   opacity: 1,\r\n        //   src: require('../../assets/images/mark.png'),\r\n        // }),\r\n        //文本样式\r\n        text: new Text({\r\n          textAlign: 'center',\r\n          textBaseline: 'middle',\r\n          font: 'normal 0.15rem 微软雅黑',\r\n          text: feature.values_.name,\r\n          offsetY: -25,\r\n          fill: new Fill({\r\n            color: color\r\n          }),\r\n          rotation: feature.values_.font_angle * Math.PI / 180,\r\n          padding: [2, 5, 2, 5],\r\n        }),\r\n        // 设置层级\r\n        zIndex: 1999999999\r\n      });\r\n      styles.push(style);\r\n      return styles;\r\n    },\r\n\r\n\r\n    changeTextStyle (checkVal) {\r\n      let textLayer = this.textMarkLayerNmArray;\r\n      this.layerArray.forEach(item => {\r\n        let layerName = item.values_.name\r\n        if (textLayer.indexOf(layerName) != -1) {\r\n          let vectoryResouce = item.getSource();\r\n          let featureArray = vectoryResouce.featuresRtree_.getAll();\r\n          for (let m = 0; m < featureArray.length; m++) {\r\n            let fontcolor = featureArray[m].values_.font_color;\r\n            let changeColor;\r\n            if (checkVal == 1) {\r\n              changeColor = '#ffff00'\r\n            } else {\r\n              changeColor = '#000000'\r\n            }\r\n            featureArray[m].setStyle(this.createPointStyleByColor(featureArray[m], changeColor))\r\n          }\r\n\r\n        }\r\n      })\r\n    },\r\n\r\n\r\n    //卫星地图切换\r\n    switchChange () {\r\n      let layerTypeSelect = this.value1;\r\n      if (layerTypeSelect) {\r\n        gaodeMapLayer.setVisible(false)\r\n        wxMapLayer.setVisible(true)\r\n      } else {\r\n        gaodeMapLayer.setVisible(true)\r\n        wxMapLayer.setVisible(false)\r\n      }\r\n    },\r\n\r\n    //创建图片弹框\r\n    createImageOverLayer (feature, evt, layer) {\r\n      let id = feature.values_.name;\r\n      let container = document.getElementById(\"imagePopup\" + id)\r\n      console.log(\"弹窗容器为空\");\r\n      if (container == null) {\r\n        return;\r\n      }\r\n      let content = document.getElementById('imageContent' + id)\r\n      let imageFileName = feature.values_.name + \".png\";\r\n      let src = require(\"@/assets/images/\" + imageFileName);\r\n      var zoom = this.mapData.getView().getZoom();\r\n      let width = (zoom - this.markMinZoom) * 250 + 100;\r\n      let height = width * 0.5582\r\n      content.style.width = width;\r\n      content.style.height = height;\r\n      content.innerHTML = `<img src = ` + src + ` style = 'width:100%` + `;height:100%` + `'/>`;\r\n      let overlayTemp = null;\r\n      this.imageOverLayArray.forEach(item => {\r\n        if (item.id == id) {\r\n          overlayTemp = item;\r\n        }\r\n      })\r\n      if (overlayTemp == null) {\r\n        overlayTemp = new Overlay({\r\n          element: container,\r\n          id: id,\r\n          stopEvent: true,\r\n          insertFirst: false\r\n\r\n\r\n        })\r\n        this.imageOverLayArray.push(overlayTemp);\r\n      }\r\n      this.mapData.addOverlay(overlayTemp)\r\n      overlayTemp.setPosition(evt.coordinate)\r\n      container.style.display = 'block';\r\n    },\r\n\r\n\r\n    //设置标记图片样式\r\n    createImageMarkStyle (feature, vectorLayerTmp) {\r\n      let this_ = this;\r\n      vectorLayerTmp.values_.zIndex = 99999999999999\r\n      var zoom = this.mapData.getView().getZoom();\r\n      let scaleChange = (zoom - this.markMinZoom) * 0.2 + 0.5;\r\n      //设置可拖动\r\n      var translate = new Translate({\r\n        hitTolerance: 20,\r\n        layers: [vectorLayerTmp]\r\n      });\r\n      //图片标注拖动，图片弹窗关闭\r\n      translate.on('translating', function (e) {\r\n        let result = this_.removeImgPopup(feature.values_.name);\r\n        translate.values_.openStatus = result;\r\n\r\n      })\r\n\r\n      translate.on(['translateend'], function (e) {\r\n        let openStatus = translate.values_.openStatus;\r\n        console.log('拖动结束' + openStatus)\r\n        if (openStatus) {\r\n          let coordinate = e.coordinate;\r\n          this_.showImgPopup(feature.values_.name, coordinate);\r\n        }\r\n        //重置状态\r\n        translate.values_.openStatus = null;\r\n      })\r\n\r\n      this.mapData.addInteraction(translate);\r\n      return new OlStyleStyle({\r\n        //图标样式\r\n        image: new OlStyleIcon({\r\n          anchor: [10, 18],\r\n          scale: scaleChange,\r\n          anchorOrigin: 'top-right',\r\n          anchorXUnits: 'pixels',\r\n          anchorYUnits: 'pixels',\r\n          offsetOrigin: 'bottom-left',\r\n          opacity: 1,\r\n          src: feature.values_.src\r\n        }),\r\n      });\r\n    },\r\n\r\n\r\n    // 鼠标点击地图事件\r\n    mapClick (evt) {\r\n      let pixel = this.mapData.getEventPixel(evt.originalEvent);\r\n      let featureInfo = {};\r\n      this.mapData.forEachFeatureAtPixel(pixel,\r\n        function (feature, layer) {\r\n          featureInfo.feature = feature;\r\n          featureInfo.layer = layer;\r\n          return featureInfo;\r\n        });\r\n      let feature = featureInfo.feature;\r\n      let layer = featureInfo.layer;\r\n      if (featureInfo.feature) {\r\n        //捕捉到要素后，弹框\r\n        let coordinate = evt.coordinate\r\n        this.addPopup(coordinate, feature)\r\n        this.addHightLigthByLayer(feature, layer, this)\r\n        //对于图片图层展示图片弹框\r\n        this.popImage(feature, layer, evt);\r\n      } else {\r\n\r\n        this.removePopup();\r\n      }\r\n    },\r\n\r\n    createImageStyle (feature, image) {\r\n      var zoom = this.mapData.getView().getZoom();\r\n      let scaleChange = (zoom - this.markMinZoom) * 0.2 + 0.1;\r\n      return new OlStyleStyle({\r\n        //图标样式\r\n        image: new OlStyleIcon({\r\n          anchor: [10, 18],\r\n          scale: scaleChange,\r\n          anchorOrigin: 'top-right',\r\n          anchorXUnits: 'pixels',\r\n          anchorYUnits: 'pixels',\r\n          offsetOrigin: 'bottom-left',\r\n          opacity: 1,\r\n          src: image\r\n        }),\r\n      });\r\n    },\r\n\r\n\r\n\r\n    popImage (feature, layer, evt) {\r\n      if (!feature.values_.file_type) {\r\n        return;\r\n      }\r\n      if (feature.values_.file_type != 'image') {\r\n        return;\r\n      }\r\n\r\n      this.createImageOverLayer(feature, evt, layer);\r\n    },\r\n\r\n\r\n\r\n    mapMoveend () {\r\n      var zoom = this.mapData.getView().getZoom();\r\n      if (zoom > this.markMinZoom) {\r\n\r\n        //显示文字标注\r\n        this.layerArray.forEach(item => {\r\n          if (item.values_.moveeHide || item.values_.initHide) {\r\n            item.setVisible(true);\r\n            item.set('moveeHide', false);\r\n            item.set('initHide', false);\r\n          }\r\n        })\r\n\r\n      } else if (zoom <= this.markMinZoom) {\r\n        this.markFlag = false;\r\n        //隐藏图片弹框\r\n        this.imageOverLayArray.forEach(item => {\r\n          let container = document.getElementById('imagePopup' + item.id);\r\n          if (container != null) {\r\n            container.style.display = 'none';\r\n          }\r\n        });\r\n\r\n        //隐藏文字标注\r\n        this.layerArray.forEach(item => {\r\n          if (this.textMarkLayerNmArray.indexOf(item.values_.name) != -1) {\r\n            if (item.values_.visible) {\r\n              //缩放隐藏标识\r\n              item.set('moveeHide', true)\r\n            }\r\n            item.setVisible(false);\r\n          }\r\n        })\r\n\r\n\r\n\r\n      }\r\n\r\n      //根据缩放事件调整弹框大小\r\n      this.imageOverLayArray.forEach(item => {\r\n        let container = document.getElementById('imagePopup' + item.id)\r\n        if (container != null) {\r\n          let width = (zoom - this.markMinZoom) * 250 + 100;\r\n          container.style.width = width + \"px\"\r\n          container.style.height = width * 0.5582 + \"px\"\r\n        }\r\n      })\r\n\r\n    },\r\n    down (e, i) {\r\n      let dragObj = e.currentTarget\r\n      this.isMouseDown = true\r\n      this['currentX' + i] = e.clientX\r\n      this['currentY' + i] = e.clientY\r\n      this['objX' + i] = dragObj.offsetLeft\r\n      this['objY' + i] = dragObj.offsetTop\r\n      document.onmouseup = e => {\r\n\r\n        this.isMouseDown = false //鼠标抬起时候不要在跟随鼠标移动\r\n        if (!this.isMouseDown) {\r\n          return false\r\n        }\r\n        this.isMouseDown = false //鼠标抬起时候不要在跟随鼠标移动\r\n        dragObj.style.zIndex = 1\r\n      }\r\n      document.onmousemove = e => {\r\n        if (this.isMouseDown == false) {\r\n          return false\r\n        }\r\n        let moveX = e.clientX - this['currentX' + i]\r\n        let moveY = e.clientY - this['currentY' + i]\r\n        dragObj.style.left = this['objX' + i] + moveX + 'px'\r\n        dragObj.style.top = this['objY' + i] + moveY + 'px'\r\n        dragObj.style.zIndex = 999 //让拖动的div权重最大\r\n      }\r\n\r\n    },\r\n    scaleDom (e) {\r\n\r\n      let div = e.currentTarget\r\n      let zoom = parseInt(div.style.zoom, 10) || 100;\r\n      zoom += e.wheelDelta / 12;\r\n      if (zoom > 0) { div.style.zoom = `${zoom}%` }\r\n    }\r\n\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.ol-popup {\r\n  position: absolute;\r\n  bottom: 0.1875rem;\r\n  left: -2.1125rem;\r\n  width: 4.8875rem;\r\n  border-radius: 0.0625rem;\r\n  padding: 0.125rem 0.1875rem;\r\n  background: #ffffff;\r\n  border: 0.0125rem solid #d2e3fa;\r\n  box-shadow: 0 0.125rem 0.25rem 0.0125rem rgba(138, 144, 153, 0.4);\r\n  color: #4a4a4a;\r\n}\r\n.ol-popup-closer {\r\n  position: absolute;\r\n  top: 0.1rem;\r\n  color: #999999;\r\n  font-weight: bold;\r\n  font-size: 0.125rem;\r\n  right: 0.1rem;\r\n}\r\n.popup-nav-title {\r\n  display: flex;\r\n  justify-content: space-between;\r\n}\r\n.popup-nav-title span:first-child {\r\n  color: #000;\r\n}\r\n.popup-nav-title span:last-child {\r\n  color: #707070;\r\n  font-size: 0.15rem;\r\n}\r\n.el-divider--horizontal {\r\n  margin: 0.1875rem 0;\r\n}\r\n.popup-nav-item {\r\n  display: flex;\r\n  color: #4a4a4a;\r\n}\r\n.popup-nav-icon {\r\n  margin-right: 0.1rem;\r\n  width: 0.1875rem;\r\n}\r\n.popup-item {\r\n  font-size: 0.175rem;\r\n  margin-bottom: 0.1rem;\r\n}\r\n.jt-icon {\r\n  width: 0.375rem;\r\n  position: absolute;\r\n  bottom: -0.175rem;\r\n  left: 1.925rem;\r\n}\r\n::v-deep .el-checkbox {\r\n  position: relative;\r\n  display: block;\r\n  height: 0.325rem;\r\n}\r\n.el-checkbox-group {\r\n  width: 100%;\r\n}\r\n.colorBox {\r\n  width: 0.6rem;\r\n  height: 0.15rem;\r\n  display: inline-block;\r\n  border-radius: 0.025rem;\r\n  position: absolute;\r\n  right: 0.125rem;\r\n}\r\n.road-selector-pop {\r\n  width: 1.5rem;\r\n  height: 2.5rem;\r\n  z-index: 200000;\r\n  position: fixed;\r\n  margin-left: 0.875rem;\r\n  margin-top: 0.6875rem;\r\n  .pop-title {\r\n    font-weight: bold;\r\n    font-size: 0.175rem;\r\n  }\r\n}\r\n.el-collapse-item {\r\n  width: 3.25rem;\r\n  height: 0.55rem;\r\n  opacity: 1;\r\n\r\n  ::v-deep .el-collapse-item__header {\r\n    height: 0.55rem;\r\n    padding-left: 0.125rem;\r\n    background: #ffffff;\r\n    box-shadow: 0 0.125rem 0.25rem 0.0125rem rgba(138, 144, 153, 0.4);\r\n    border-radius: 0.1rem;\r\n  }\r\n}\r\n::v-deep .el-collapse {\r\n  border: none;\r\n  box-shadow: 0 0.125rem 0.25rem 0.0125rem rgba(138, 144, 153, 0.4);\r\n}\r\n::v-deep .el-collapse-item__wrap {\r\n  border-radius: 0 0 0.1rem 0.1rem;\r\n  margin-top: -0.0625rem;\r\n  box-shadow: 0 0.125rem 0.25rem 0.0125rem rgba(138, 144, 153, 0.4);\r\n}\r\n.dot {\r\n  width: 0.3rem;\r\n  height: 0.125rem;\r\n  border-radius: 0.025rem;\r\n  display: inline-block;\r\n  margin-left: 0.1rem;\r\n}\r\n::v-deep .el-tree-node__children {\r\n  overflow: initial !important;\r\n}\r\n.change-div {\r\n  position: absolute;\r\n  right: 0.25rem;\r\n  top: 0.375rem;\r\n  z-index: 999;\r\n  .switch-btn {\r\n    display: inline-block;\r\n    width: 1.2875rem;\r\n    height: 0.475rem;\r\n    text-align: center;\r\n    background: #001d40;\r\n    box-sizing: border-box;\r\n    border: 0.025rem solid #336bb4;\r\n    font-size: 0.175rem;\r\n    font-weight: bold;\r\n    line-height: 0.4375rem;\r\n    color: #ffffff;\r\n    cursor: pointer;\r\n  }\r\n  .left-btn {\r\n    border-radius: 0.2375rem 0 0 0.2375rem;\r\n    margin-right: 0.1rem;\r\n  }\r\n  .right-btn {\r\n    border-radius: 0 0.2375rem 0.2375rem 0;\r\n    margin-left: 0.1rem;\r\n  }\r\n  .switch-btn:hover {\r\n    background: linear-gradient(180deg, #2ca6ff 37%, #00ffb7 100%);\r\n    color: #ffffff;\r\n  }\r\n  .btn-active {\r\n    background: linear-gradient(180deg, #2ca6ff 37%, #00ffb7 100%);\r\n    color: #ffffff;\r\n  }\r\n}\r\n/* 设置滚动条的样式 */\r\n::-webkit-scrollbar {\r\n  width: 0.075rem;\r\n}\r\n/* 滚动槽 */\r\n::-webkit-scrollbar-track {\r\n  -webkit-box-shadow: inset006pxrgba(0, 0, 0, 0.3);\r\n  border-radius: 0.1rem;\r\n}\r\n/* 滚动条滑块 */\r\n::-webkit-scrollbar-thumb {\r\n  border-radius: 0.075rem;\r\n  background: #ebeef5;\r\n  -webkit-box-shadow: inset006pxrgba(0, 0, 0, 0.5);\r\n}\r\n::-webkit-scrollbar-thumb:window-inactive {\r\n  background: #ebeef5;\r\n}\r\n.tree-div {\r\n  height: 4rem;\r\n  overflow: auto;\r\n}\r\n</style>\r\n"]}]}